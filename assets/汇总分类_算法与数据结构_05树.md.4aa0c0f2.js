import{_ as t,r as e,c as o,a as c,b as a,d as n,e as s,o as l}from"./app.91b9ffc3.js";const v='{"title":"\u6811","description":"","frontmatter":{"published":true,"date":"2022-1-22","tags":"\u7B97\u6CD5\u4E0E\u6570\u636E\u7ED3\u6784"},"headers":[{"level":2,"title":"\u57FA\u672C\u6982\u5FF5","slug":"\u57FA\u672C\u6982\u5FF5"},{"level":3,"title":"\u6811\u7684\u5B9A\u4E49\uFF08\u5728\u4EFB\u610F\u975E\u7A7A\u6811\u4E2D\uFF09","slug":"\u6811\u7684\u5B9A\u4E49\uFF08\u5728\u4EFB\u610F\u975E\u7A7A\u6811\u4E2D\uFF09"},{"level":3,"title":"\u7279\u70B9","slug":"\u7279\u70B9"},{"level":3,"title":"\u5173\u952E\u8BCD","slug":"\u5173\u952E\u8BCD"},{"level":3,"title":"\u57FA\u672C\u64CD\u4F5C","slug":"\u57FA\u672C\u64CD\u4F5C"},{"level":3,"title":"\u5E94\u7528\u573A\u666F","slug":"\u5E94\u7528\u573A\u666F"},{"level":2,"title":"\u4E8C\u53C9\u6811","slug":"\u4E8C\u53C9\u6811"},{"level":3,"title":"\u57FA\u7840\u6982\u5FF5","slug":"\u57FA\u7840\u6982\u5FF5"},{"level":3,"title":"\u6EE1\u4E8C\u53C9\u6811","slug":"\u6EE1\u4E8C\u53C9\u6811"},{"level":3,"title":"\u5B8C\u5168\u4E8C\u53C9\u6811","slug":"\u5B8C\u5168\u4E8C\u53C9\u6811"},{"level":3,"title":"\u6027\u8D28","slug":"\u6027\u8D28"},{"level":3,"title":"\u5B58\u50A8","slug":"\u5B58\u50A8"},{"level":3,"title":"\u57FA\u672C\u64CD\u4F5C","slug":"\u57FA\u672C\u64CD\u4F5C-1"},{"level":3,"title":"\u904D\u5386","slug":"\u904D\u5386"},{"level":3,"title":"\u9012\u5F52\u7B97\u6CD5\u7684\u975E\u9012\u5F52\u63CF\u8FF0","slug":"\u9012\u5F52\u7B97\u6CD5\u7684\u975E\u9012\u5F52\u63CF\u8FF0"},{"level":2,"title":"\u6811","slug":"\u6811-1"},{"level":3,"title":"\u6811\u7684\u8868\u793A","slug":"\u6811\u7684\u8868\u793A"},{"level":3,"title":"\u8F6C\u6362","slug":"\u8F6C\u6362"},{"level":2,"title":"\u54C8\u592B\u66FC\u6811","slug":"\u54C8\u592B\u66FC\u6811"},{"level":3,"title":"\u57FA\u7840\u6982\u5FF5","slug":"\u57FA\u7840\u6982\u5FF5-1"},{"level":3,"title":"\u521B\u5EFA\u54C8\u592B\u66FC\u6811\u4E0E\u54C8\u592B\u66FC\u7F16\u7801","slug":"\u521B\u5EFA\u54C8\u592B\u66FC\u6811\u4E0E\u54C8\u592B\u66FC\u7F16\u7801"}],"relativePath":"\u6C47\u603B\u5206\u7C7B/\u7B97\u6CD5\u4E0E\u6570\u636E\u7ED3\u6784/05\u6811.md","lastUpdated":1642857642894}',u={},r=a(`<h1 id="\u6811" tabindex="-1">\u6811 <a class="header-anchor" href="#\u6811" aria-hidden="true">#</a></h1><blockquote><p>\u672C\u7AE0\u4ECB\u7ECD\u6811\u7684\u76F8\u5173\u77E5\u8BC6\uFF0C\u5305\u542B\u6570\u636E\u7ED3\u6784\uFF1A\u4E8C\u53C9\u6811\u3001\u54C8\u592B\u66FC\u6811\uFF1B\u4EE5\u53CA\u4E8C\u53C9\u6811\u7684\u4E09\u79CD\u904D\u5386\u3001\u8BA1\u7B97\u53F6\u5B50\u6570\u3001\u6DF1\u5EA6\u3001\u4E2D\u7F00\u8868\u8FBE\u5F0F\u7B49\uFF0C\u4F7F\u7528\u54C8\u592B\u66FC\u6811\u751F\u6210\u6700\u4F18\u524D\u7F00\u7801\u3002</p><p>\u53EF\u4EE5\u8F6C\u8F7D\uFF0C\u4F46\u8BF7\u58F0\u660E\u6E90\u94FE\u63A5\uFF1A\u6587\u7AE0\u6E90\u94FE\u63A5<a href="https://justin3go.com" target="_blank" rel="noopener noreferrer">justin3go.com</a>(\u6709\u4E9Blatex\u516C\u5F0F\u67D0\u4E9B\u5E73\u53F0\u4E0D\u80FD\u6E32\u67D3\u53EF\u67E5\u770B\u8FD9\u4E2A\u7F51\u7AD9)</p></blockquote><h2 id="\u57FA\u672C\u6982\u5FF5" tabindex="-1">\u57FA\u672C\u6982\u5FF5 <a class="header-anchor" href="#\u57FA\u672C\u6982\u5FF5" aria-hidden="true">#</a></h2><h3 id="\u6811\u7684\u5B9A\u4E49\uFF08\u5728\u4EFB\u610F\u975E\u7A7A\u6811\u4E2D\uFF09" tabindex="-1">\u6811\u7684\u5B9A\u4E49\uFF08\u5728\u4EFB\u610F\u975E\u7A7A\u6811\u4E2D\uFF09 <a class="header-anchor" href="#\u6811\u7684\u5B9A\u4E49\uFF08\u5728\u4EFB\u610F\u975E\u7A7A\u6811\u4E2D\uFF09" aria-hidden="true">#</a></h3><ul><li>\u5FC5\u6709\u4E00\u4E2A\u79F0\u4E3A\u6839\u7684\u7ED3\u70B9\u3002</li><li>\u5F53n&gt;1\uFF08\u7ED3\u70B9\u6811\uFF09\u65F6\uFF0C\u5176\u4F59\u7ED3\u70B9\u53EF\u5206\u4E3Am\uFF08m&gt;0\uFF09\u4E2A<strong>\u4E92\u4E0D\u76F8\u4EA4</strong>\u7684\u6709\u9650\u96C6T1\uFF0CT2\xB7\xB7\xB7\xB7\xB7\xB7T_m\u3002</li><li>\u5176\u4E2D\u6BCF\u4E00\u4E2A\u96C6\u5408\u672C\u8EAB\u53C8\u662F\u4E00\u9897\u6811\uFF0C\u79F0\u4E3A\u6839\u7684\u5B50\u6811\u3002</li></ul><h3 id="\u7279\u70B9" tabindex="-1">\u7279\u70B9 <a class="header-anchor" href="#\u7279\u70B9" aria-hidden="true">#</a></h3><ul><li>\u975E\u7A7A\u6811\u4E2D\u81F3\u5C11\u6709\u4E00\u4E2A\u6839\u7ED3\u70B9\u3002</li><li>\u6811\u4E2D\u5404\u5B50\u6811\u662F\u4E92\u4E0D\u76F8\u4EA4\u7684\u96C6\u5408\u3002</li><li>\u4EFB\u610F\u7ED3\u70B9\u90FD\u53EF\u4EE5\u6709\u96F6\u4E2A\u6216\u591A\u4E2A\u76F4\u63A5\u540E\u7EE7\u7ED3\u70B9\uFF0C\u4F46<strong>\u81F3\u591A\u53EA\u6709\u4E00\u4E2A\u76F4\u63A5\u524D\u8D8B\u7ED3\u70B9</strong>\u3002</li><li>\u53F6\u7ED3\u70B9\u65E0\u540E\u7EE7\uFF0C\u6839\u7ED3\u70B9\u65E0\u524D\u8D8B\u3002</li></ul><h3 id="\u5173\u952E\u8BCD" tabindex="-1">\u5173\u952E\u8BCD <a class="header-anchor" href="#\u5173\u952E\u8BCD" aria-hidden="true">#</a></h3><ul><li>\u7ED3\u70B9\uFF1A\u6811\u4E2D\u7684\u5143\u7D20\uFF0C\u5305\u62EC\u6570\u636E\u9879\u53CA\u82E5\u5E72\u6307\u5411\u5176\u5B50\u6811\u7684\u5206\u652F\u3002</li><li><strong>\u7ED3\u70B9\u7684\u5EA6</strong>\uFF1A\u7ED3\u70B9\u62E5\u6709\u7684\u5B50\u6811\u6570\u3002</li><li><strong>\u6811\u7684\u5EA6</strong>\uFF1A\u4E00\u4E2A\u6811\u4E2D\u6700\u5927\u7684\u7ED3\u70B9\u7684\u5EA6\u3002</li><li><strong>\u53F6\u5B50\u7ED3\u70B9</strong>\uFF1A\u5EA6\u4E3A0\u7684\u7ED3\u70B9\uFF0C\u4E5F\u53EB\u7EC8\u7AEF\u7ED3\u70B9\u3002</li><li>\u5206\u652F\u7ED3\u70B9\uFF1A\u5EA6\u4E0D\u4E3A0\u7684\u7ED3\u70B9\uFF0C\u4E5F\u53EB\u975E\u7EC8\u7AEF\u7ED3\u70B9\u3002</li><li>\u5185\u90E8\u7ED3\u70B9\uFF1A\u9664\u6839\u7ED3\u70B9\u5916\u7684\u5206\u652F\u7ED3\u70B9\u3002</li><li>\u5B69\u5B50\u7ED3\u70B9\uFF1A\u7ED3\u70B9\u5B50\u6811\u7684\u6839\uFF0C\u79F0\u4E3A\u8BE5\u7ED3\u70B9\u7684\u5B69\u5B50\u3002</li><li>\u53CC\u4EB2\u7ED3\u70B9\uFF1A\u5B69\u5B50\u7ED3\u70B9\u7684\u4E0A\u5C42\u7ED3\u70B9\uFF0C\u79F0\u4E3A\u8BE5\u7ED3\u70B9\u7684\u53CC\u4EB2\u3002</li><li>\u5144\u5F1F\u7ED3\u70B9\uFF1A\u540C\u4E00\u53CC\u4EB2\u7684\u5B69\u5B50\u4E4B\u95F4\u4E92\u79F0\u4E3A\u5144\u5F1F\u3002</li><li>\u5802\u5144\u5F1F\u7ED3\u70B9\uFF1A\u5176\u53CC\u4EB2\u5728\u540C\u4E00\u5C42\u7684\u7ED3\u70B9\u4E92\u79F0\u4E3A\u5802\u5144\u5F1F\u3002</li><li>\u6811\u7684\u5C42\u6B21\uFF1A\u4ECE\u6839\u7ED3\u70B9\u7B97\u8D77\uFF0C\u6839\u4E3A\u7B2C\u4E00\u5C42\uFF0C\u5B83\u7684\u5B69\u5B50\u4E3A\u7B2C\u4E8C\u5C42\xB7\xB7\xB7\xB7\xB7\xB7</li><li><strong>\u6811\u7684\u6DF1\u5EA6</strong>\uFF1A\u6811\u4E2D\u7ED3\u70B9\u7684\u6700\u5927\u5C42\u6B21\u6570\u3002</li><li>\u6709\u5E8F\u6811\u548C\u65E0\u5E8F\u6811\uFF1A\u5982\u679C\u5C06\u6811\u4E2D\u7ED3\u70B9\u7684\u5404\u5B50\u6811\u770B\u6210\u4ECE\u5DE6\u81F3\u53F3\u6709\u6B21\u5E8F\u7684(\u5373\u4E0D\u80FD\u4E92\u6362)\uFF0C\u5219\u79F0\u8BE5\u6811\u4E3A\u6709\u5E8F\u6811\uFF0C\u5426\u5219\u79F0\u65E0\u5E8F\u6811\u3002\u6709\u5E8F\u6811\u6700\u5DE6\u8FB9\u7684\u5B50\u6811\u7684\u6839\u79F0\u4E3A\u7B2C\u4E00\u4E2A\u5B69\u5B50\uFF0C\u6700\u53F3\u8FB9\u7684\u79F0\u4E3A\u6700\u540E\u4E00\u4E2A\u5B69\u5B50\u3002</li><li>\u68EE\u6797\uFF1Am(m&gt;=0)\u9897\u4E92\u4E0D\u76F8\u4EA4\u7684\u6811\u7684\u96C6\u5408\u3002</li><li>\u7956\u5148\uFF1A\u7ED3\u70B9\u7684\u7956\u5148\u662F\u4ECE\u6839\u5230\u8BE5\u7ED3\u70B9\u6240\u7ECF\u5206\u652F\u4E0A\u7684\u6240\u6709\u7ED3\u70B9\u3002</li><li>\u5B50\u5B59\uFF1A\u4EE5\u67D0\u7ED3\u70B9\u4E3A\u6839\u7684\u5B50\u6811\u4E2D\u7684\u4EFB\u4E00\u7ED3\u70B9\u90FD\u79F0\u4E3A\u8BE5\u7ED3\u70B9\u7684\u5B50\u5B59\u3002</li></ul><h3 id="\u57FA\u672C\u64CD\u4F5C" tabindex="-1">\u57FA\u672C\u64CD\u4F5C <a class="header-anchor" href="#\u57FA\u672C\u64CD\u4F5C" aria-hidden="true">#</a></h3><p>\u521D\u59CB\u5316\u3001\u6C42\u6839\u3001\u6C42\u53CC\u4EB2\u3001\u6C42\u5B69\u5B50\u7ED3\u70B9\u3001\u6C42\u53F3\u5144\u5F1F\u3001\u5EFA\u6811\u3001\u63D2\u5165\u5B50\u6811\u64CD\u4F5C\u3001\u5220\u9664\u5B50\u6811\u64CD\u4F5C\u3001\u904D\u5386\u64CD\u4F5C\u3001\u6E05\u9664\u64CD\u4F5C\u3002</p><h3 id="\u5E94\u7528\u573A\u666F" tabindex="-1">\u5E94\u7528\u573A\u666F <a class="header-anchor" href="#\u5E94\u7528\u573A\u666F" aria-hidden="true">#</a></h3><p>\u51B3\u7B56\u6811\u3001\u4E8C\u53C9\u6392\u5E8F\u6811\u3001\u53E5\u6CD5\u4F9D\u5B58\u6811\xB7\xB7\xB7\xB7\xB7\xB7</p><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20210608215758845.png" alt="image-20210608215758845" style="zoom:50%;"><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20210608215720392.png" alt="image-20210608215720392" style="zoom:50%;"><h2 id="\u4E8C\u53C9\u6811" tabindex="-1">\u4E8C\u53C9\u6811 <a class="header-anchor" href="#\u4E8C\u53C9\u6811" aria-hidden="true">#</a></h2><h3 id="\u57FA\u7840\u6982\u5FF5" tabindex="-1">\u57FA\u7840\u6982\u5FF5 <a class="header-anchor" href="#\u57FA\u7840\u6982\u5FF5" aria-hidden="true">#</a></h3><ul><li>\u6BCF\u4E2A\u7ED3\u70B9\u81F3\u591A\u6709\u4E24\u68F5\u5B50\u6811\u3002</li><li>\u4E0D\u5B58\u5728\u5EA6\u5927\u4E8E2\u7684\u7ED3\u70B9\u3002</li><li><strong>\u5B50\u6811\u6709\u5DE6\u53F3\u4E4B\u5206</strong>\uFF0C\u6B21\u5E8F\u4E0D\u80FD\u4EFB\u610F\u98A0\u5012\u3002</li><li><strong>\u4E8C\u53C9\u6811\u4E0D\u662F\u4E00\u79CD\u7279\u6B8A\u7684\u6811\uFF0C\u53EA\u662F\u4E00\u79CD\u7279\u6B8A\u7684\u6811\u5F62\u7ED3\u6784\u3002</strong></li></ul><h3 id="\u6EE1\u4E8C\u53C9\u6811" tabindex="-1">\u6EE1\u4E8C\u53C9\u6811 <a class="header-anchor" href="#\u6EE1\u4E8C\u53C9\u6811" aria-hidden="true">#</a></h3><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20210608221448006.png" alt="image-20210608221448006" style="zoom:67%;"><ul><li>\u6DF1\u5EA6\u4E3Ak\u7684\u6EE1\u4E8C\u53C9\u6811\uFF0C\u67092^k - 1\u4E2A\u7ED3\u70B9\u3002</li></ul> 2^0 + \u2026\u2026+2^{k-1} = 2^k-1 <ul><li>2^k - 1\uFF0C\u662F\u6DF1\u5EA6\u4E3Ak\u7684\u4E8C\u53C9\u6811\u6240\u5177\u6709\u7684\u6700\u5927\u7ED3\u70B9\u4E2A\u6570\u3002</li><li><strong>\u6BCF\u5C42\u4E0A\u7684\u7ED3\u70B9\u6570\u90FD\u8FBE\u5230\u6700\u5927\u503C\u3002</strong></li><li>\u53EA\u6709\u5EA6\u4E3A0\u548C\u5EA6\u4E3A2\u7684\u7ED3\u70B9\u3002</li><li>\u6BCF\u4E2A\u7ED3\u70B9\u5747\u6709\u4E24\u68F5\u9AD8\u5EA6\u76F8\u540C\u7684\u5B50\u6811\u3002</li><li>\u53F6\u5B50\u7ED3\u70B9\u90FD\u5728\u6811\u7684\u6700\u4E0B\u4E00\u5C42\u3002</li></ul><p><strong>\u5224\u65AD\u4E00\u4E2A\u6811\u662F\u5426\u662F\u5B8C\u5168\u4E8C\u53C9\u6811\uFF1A</strong></p><p>\u601D\u8DEF\uFF1A\u4ECE\u4E0A\u5230\u4E0B\uFF0C\u53F3\u5230\u5DE6\u626B\u63CF\uFF0C<strong>\u7B2C\u4E00\u4E2A\u5EA6\u5C0F\u4E8E2\u7684\u4E4B\u540E\u7684\u6BCF\u4E00\u4E2A\u7ED3\u70B9\u90FD\u5FC5\u987B\u662F\u53F6\u5B50\u7ED3\u70B9</strong>\u3002</p><div class="language-"><pre><code>foreach node in one_layer
begin:
	if node\u6709\u4E24\u4E2A\u5B69\u5B50\uFF0C\u5219continue;
	if node\u65E0\u5DE6\u5B69\u5B50\u4F46\u6709\u53F3\u5B69\u5B50\uFF0C\u5219return False;
	if (node\u6709\u4E00\u4E2A\u5DE6\u5B69\u5B50)||(node\u662F\u53F6\u5B50),\u5219:
		foreachafnode in NODES(node\u4E4B\u540E\u7684\u7ED3\u70B9\u96C6)
			if afnode\u4E0D\u662F\u53F6\u5B50,\u5219return False;
endforeach
return Ture;
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="\u5B8C\u5168\u4E8C\u53C9\u6811" tabindex="-1">\u5B8C\u5168\u4E8C\u53C9\u6811 <a class="header-anchor" href="#\u5B8C\u5168\u4E8C\u53C9\u6811" aria-hidden="true">#</a></h3><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20210608221519418.png" alt="image-20210608221519418" style="zoom:67%;"><ul><li><strong>\u5BF9\u6BD4\u6EE1\u4E8C\u53C9\u6811\uFF0C\u6B21\u5E8F\u662F\u4E00\u6837\u7684\uFF0C\u6700\u540E\u4E00\u5C42\u53EA\u7F3A\u5C11\u53F3\u8FB9\u7684\u82E5\u5E72\u7ED3\u70B9\u3002</strong></li><li>\u53F6\u5B50\u7ED3\u70B9\u53EA\u53EF\u80FD\u5728\u6700\u5927\u7684\u4E24\u5C42\u4E0A\u51FA\u73B0\u3002</li><li><strong>\u5BF9\u4EFB\u610F\u7ED3\u70B9\uFF0C\u82E5\u5176\u53F3\u5B50\u6811\u7684\u6DF1\u5EA6\u4E3AL\uFF0C\u5219\u5176\u5DE6\u5B50\u6811\u7684\u6DF1\u5EA6\u5FC5\u4E3AL\u6216L+1\u3002</strong></li><li><strong>\u9664\u6700\u540E\u4E00\u5C42\u5916\uFF0C\u6BCF\u4E00\u5C42\u7684\u7ED3\u70B9\u6570\u5747\u8FBE\u5230\u6700\u5927\u503C\u3002</strong></li></ul><h3 id="\u6027\u8D28" tabindex="-1">\u6027\u8D28 <a class="header-anchor" href="#\u6027\u8D28" aria-hidden="true">#</a></h3><ul><li>\u4E8C\u53C9\u6811\u7684\u7B2Ci\u5C42\u81F3\u591A\u67092^{i-1}\u4E2A\u7ED3\u70B9\uFF08i&gt;=1\uFF09\u3002</li><li>\u6DF1\u5EA6\u4E3Ak\u7684\u4E8C\u53C9\u6811\uFF0C\u81F3\u591A\u67092^k - 1\u4E2A\u7ED3\u70B9\u3002</li><li>\u5BF9\u4EFB\u610F\u4E8C\u53C9\u6811T\uFF0C\u5982\u679C\u5176\u7EC8\u7AEF\u7ED3\u70B9\u6570\u4E3An0\uFF0C\u5EA6\u4E3A2\u7684\u7ED3\u70B9\u6570\u4E3An2\uFF0C\u5219n0 = n2 + 1\u3002</li><li>\u5177\u6709n\u4E2A\u7ED3\u70B9\u7684\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u6DF1\u5EA6\u4E3A[log_2 n ] + 1\u3002</li><li><strong>\u5BF9\u4E8E\u6709n\u4E2A\u7ED3\u70B9\u7684\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u7ED3\u70B9\u6309\u5C42\u5E8F\u7F16\u53F7\uFF08\u4ECE\u7B2C\u4E00\u5C42\u5230\u6700\u540E\u4E00\u5C42\uFF0C\u6BCF\u5C42\u4ECE\u5DE6\u5230\u53F3\uFF09\uFF0C\u5219\u5BF9\u4EFB\u4E00\u7ED3\u70B9\uFF081&lt;= i &lt;=n\uFF09\uFF0C\u6709\uFF1A</strong><ul><li>\u5982\u679Ci=1\uFF0C\u5219\u7ED3\u70B9i\u662F\u6839\u7ED3\u70B9\uFF0C\u65E0\u53CC\u4EB2\uFF0C\u5426\u5219\uFF0C\u5176\u53CC\u4EB2\u7ED3\u70B9\u662F[i/2]</li><li>\u5982\u679C2i&gt;n\uFF0C\u5219\u7ED3\u70B9i\u65E0\u5DE6\u5B69\u5B50\uFF08\u7ED3\u70B9i\u4E3A\u53F6\u5B50\uFF09\uFF0C\u5426\u5219\u5176\u5DE6\u5B69\u5B50\u662F\u8282\u70B92i\u3002</li><li>\u5982\u679C2i + 1&gt;n\uFF0C\u5219\u7ED3\u70B9i\u65E0\u53F3\u5B69\u5B50\uFF0C\u5426\u5219\u53F3\u5DE6\u5B69\u5B50\u662F\u8282\u70B92i\u3002</li></ul></li></ul><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20210609091856020.png" alt="image-20210609091856020" style="zoom:67%;"><h3 id="\u5B58\u50A8" tabindex="-1">\u5B58\u50A8 <a class="header-anchor" href="#\u5B58\u50A8" aria-hidden="true">#</a></h3><h5 id="\u987A\u5E8F\u5B58\u50A8" tabindex="-1">\u987A\u5E8F\u5B58\u50A8 <a class="header-anchor" href="#\u987A\u5E8F\u5B58\u50A8" aria-hidden="true">#</a></h5><p>\u5C06\u4EFB\u610F\u4E8C\u53C9\u6811\u4FEE\u8865\u4E3A\u5B8C\u5168\u4E8C\u53C9\u6811\uFF0C\u7528\u987A\u5E8F\u8868\u5BF9\u5143\u7D20\u8FDB\u884C\u5B58\u50A8\uFF0C\u539F\u4E8C\u53C9\u6811\u7A7A\u7F3A\u7684\u7ED3\u70B9\uFF0C\u5176\u987A\u5E8F\u8868\u76F8\u5E94\u5355\u5143\u7F6E\u7A7A\uFF1A</p><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20210609092131168.png" alt="image-20210609092131168" style="zoom:50%;"><h5 id="\u94FE\u5F0F\u5B58\u50A8" tabindex="-1">\u94FE\u5F0F\u5B58\u50A8 <a class="header-anchor" href="#\u94FE\u5F0F\u5B58\u50A8" aria-hidden="true">#</a></h5><p>\u7ED3\u70B9\u6709\u4E09\u4E2A\u57DF\uFF1A\u6570\u636E\u57DF\u3001\u6307\u5411\u5DE6\u3001\u53F3\u5B50\u6811\u7684\u6307\u9488\u57DF\uFF1A</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">struct</span> <span class="token class-name">btnode</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    btnode<span class="token operator">*</span> lchild<span class="token punctuation">;</span>
    btnode<span class="token operator">*</span> rchild<span class="token punctuation">;</span>
    <span class="token function">btnode</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token function">c</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">lchild</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">rchild</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

        <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="\u57FA\u672C\u64CD\u4F5C-1" tabindex="-1">\u57FA\u672C\u64CD\u4F5C <a class="header-anchor" href="#\u57FA\u672C\u64CD\u4F5C-1" aria-hidden="true">#</a></h3><h5 id="\u521B\u5EFA\u4E8C\u53C9\u6811\uFF1A" tabindex="-1">\u521B\u5EFA\u4E8C\u53C9\u6811\uFF1A <a class="header-anchor" href="#\u521B\u5EFA\u4E8C\u53C9\u6811\uFF1A" aria-hidden="true">#</a></h5><p>\u601D\u8DEF\uFF1A</p><ul><li>\u6309\u5148\u5E8F\u5E8F\u5217\u5EFA\u7ACB\u4E8C\u53C9\u94FE\u8868\u3002</li><li><strong>abd\xB7\xB7\xB7ef\xB7\xB7g\xB7\xB7</strong>\uFF08\u8981\u6C42\u4F1A\u753B\u56FE\uFF09 <ul><li>\u5EFA\u7ACB\u6839\u7ED3\u70B9</li><li>\u5148\u5E8F\u5EFA\u7ACB\u5DE6\u5B50\u6811</li><li>\u5148\u5E8F\u5EFA\u7ACB\u53F3\u5B50\u6811</li></ul></li></ul><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token comment">// char str[] = {&#39;-&#39;, &#39;+&#39;, &#39;a&#39;, &#39;#&#39;, &#39;#&#39;, &#39;*&#39;, &#39;b&#39;, &#39;#&#39;, &#39;#&#39;, &#39;-&#39;, &#39;c&#39;, &#39;#&#39;, &#39;#&#39;, &#39;d&#39;, &#39;#&#39;, &#39;#&#39;, &#39;/&#39;, &#39;e&#39;, &#39;#&#39;, &#39;#&#39;, &#39;f&#39;, &#39;#&#39;, &#39;#&#39;,};</span>
btnode<span class="token operator">*</span> <span class="token function">creatTree</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;; &quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> <span class="token number">23</span> <span class="token operator">||</span> str<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    btnode<span class="token operator">*</span> cur_node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">btnode</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u5EFA\u7ACB\u5F53\u524D\u6811\u7684\u6839\u63A5\u8282\u70B9</span>
    x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    cur_node<span class="token operator">-&gt;</span>lchild <span class="token operator">=</span> <span class="token function">creatTree</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cur_node<span class="token operator">-&gt;</span>rchild <span class="token operator">=</span> <span class="token function">creatTree</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
 
    <span class="token keyword">return</span> cur_node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h5 id="\u8BA1\u7B97\u53F6\u5B50\u6570\uFF1A" tabindex="-1">\u8BA1\u7B97\u53F6\u5B50\u6570\uFF1A <a class="header-anchor" href="#\u8BA1\u7B97\u53F6\u5B50\u6570\uFF1A" aria-hidden="true">#</a></h5><ul><li>\u82E5\u6811\u7A7A\uFF0Creturn 0\uFF1B</li><li>\u82E5\u6811t\u53EA\u6709\u552F\u4E00\u7684\u6839\uFF0C\u5219return 1</li><li>\u5426\u5219 <ul><li>\u6C42\u8BE5\u4E8C\u53C9\u6811\u7684\u5DE6\u5B50\u6811\u7684\u53F6\u5B50\u6570m\u3002</li><li>\u6C42\u8BE5\u4E8C\u53C9\u6811\u7684\u53F3\u5B50\u6811\u7684\u53F6\u5B50\u6570n\u3002</li><li>return m+n;</li></ul></li></ul><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">int</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>btnode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> T<span class="token operator">-&gt;</span>rchild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> m<span class="token operator">+</span>n<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h5 id="\u8BA1\u7B97\u6811\u7684\u6DF1\u5EA6\uFF1A" tabindex="-1">\u8BA1\u7B97\u6811\u7684\u6DF1\u5EA6\uFF1A <a class="header-anchor" href="#\u8BA1\u7B97\u6811\u7684\u6DF1\u5EA6\uFF1A" aria-hidden="true">#</a></h5><ul><li>\u82E5\u6811\u4E3A\u7A7A\uFF0Creturn 0;</li><li>\u5426\u5219 <ul><li>\u8BA1\u7B97\u5DE6\u5B50\u6811\u7684\u9AD8\u5EA6m</li><li>\u8BA1\u7B97\u53F3\u5B50\u6811\u7684\u9AD8\u5EA6n</li><li><strong>return\uFF08m&gt;n\uFF09\uFF1Fm+1:n+1</strong></li></ul></li></ul><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">int</span> <span class="token function">high</span><span class="token punctuation">(</span>btnode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">high</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token function">high</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">&gt;</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> m<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h5 id="\u5E26\u62EC\u53F7\u7684\u4E2D\u7F00\u8868\u8FBE\u5F0F\uFF1A" tabindex="-1">\u5E26\u62EC\u53F7\u7684\u4E2D\u7F00\u8868\u8FBE\u5F0F\uFF1A <a class="header-anchor" href="#\u5E26\u62EC\u53F7\u7684\u4E2D\u7F00\u8868\u8FBE\u5F0F\uFF1A" aria-hidden="true">#</a></h5><div class="language-cpp line-numbers-mode"><pre><code><span class="token comment">//\u4EFF\u7167\u4E2D\u5E8F\u904D\u5386\uFF0C\u53EA\u662F\u533A\u5206\u5DE6\u53F3\u5B50\u6811</span>
<span class="token keyword">void</span> <span class="token function">infixExpression</span><span class="token punctuation">(</span>btnode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;(&quot;</span><span class="token punctuation">;</span>
        
        <span class="token function">infixExpression</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> T<span class="token operator">-&gt;</span>c<span class="token punctuation">;</span>
        <span class="token function">infixExpression</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="\u904D\u5386" tabindex="-1">\u904D\u5386 <a class="header-anchor" href="#\u904D\u5386" aria-hidden="true">#</a></h3><h5 id="\u5148\u5E8F\u904D\u5386\uFF08\u6839\u5DE6\u53F3\uFF09\uFF1A" tabindex="-1">\u5148\u5E8F\u904D\u5386\uFF08\u6839\u5DE6\u53F3\uFF09\uFF1A <a class="header-anchor" href="#\u5148\u5E8F\u904D\u5386\uFF08\u6839\u5DE6\u53F3\uFF09\uFF1A" aria-hidden="true">#</a></h5><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">void</span> <span class="token function">preorder</span><span class="token punctuation">(</span>btnode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> T<span class="token operator">-&gt;</span>c <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
        <span class="token function">preorder</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">preorder</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;#, &quot;</span><span class="token punctuation">;</span><span class="token comment">//\u8F93\u51FA\u5360\u4F4D\u7B26\uFF0C\u4FDD\u6301\u7ED3\u6784</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="\u4E2D\u5E8F\u904D\u5386\uFF08\u5DE6\u6839\u53F3\uFF09\uFF1A" tabindex="-1">\u4E2D\u5E8F\u904D\u5386\uFF08\u5DE6\u6839\u53F3\uFF09\uFF1A <a class="header-anchor" href="#\u4E2D\u5E8F\u904D\u5386\uFF08\u5DE6\u6839\u53F3\uFF09\uFF1A" aria-hidden="true">#</a></h5><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">void</span> <span class="token function">inorder</span><span class="token punctuation">(</span>btnode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">inorder</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> T<span class="token operator">-&gt;</span>c <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
        <span class="token function">inorder</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;#, &quot;</span><span class="token punctuation">;</span><span class="token comment">//\u8F93\u51FA\u5360\u4F4D\u7B26\uFF0C\u4FDD\u6301\u7ED3\u6784</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="\u540E\u5E8F\u904D\u5386\uFF08\u5DE6\u53F3\u6839\uFF09\uFF1A" tabindex="-1">\u540E\u5E8F\u904D\u5386\uFF08\u5DE6\u53F3\u6839\uFF09\uFF1A <a class="header-anchor" href="#\u540E\u5E8F\u904D\u5386\uFF08\u5DE6\u53F3\u6839\uFF09\uFF1A" aria-hidden="true">#</a></h5><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">void</span> <span class="token function">postorder</span><span class="token punctuation">(</span>btnode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">postorder</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">postorder</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> T<span class="token operator">-&gt;</span>c <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;#, &quot;</span><span class="token punctuation">;</span><span class="token comment">//\u8F93\u51FA\u5360\u4F4D\u7B26\uFF0C\u4FDD\u6301\u7ED3\u6784</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h5 id="\u4E3B\u51FD\u6570\uFF1A" tabindex="-1">\u4E3B\u51FD\u6570\uFF1A <a class="header-anchor" href="#\u4E3B\u51FD\u6570\uFF1A" aria-hidden="true">#</a></h5><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Create Tree&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    btnode<span class="token operator">*</span> bt_tree <span class="token operator">=</span> <span class="token function">creatTree</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u904D\u5386</span>
    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;preorder,inorder,postorder:&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">preorder</span><span class="token punctuation">(</span>bt_tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">inorder</span><span class="token punctuation">(</span>bt_tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">postorder</span><span class="token punctuation">(</span>bt_tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//\u8BA1\u7B97\u53F6\u5B50\u6570</span>
    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">countLeaf</span><span class="token punctuation">(</span>bt_tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;coutLeaf:&quot;</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token comment">//\u8BA1\u7B97\u6811\u6DF1</span>
    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;high=&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">high</span><span class="token punctuation">(</span>bt_tree<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token comment">//\u4E2D\u7F00\u8868\u8FBE\u5F0F</span>
    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;infixExpression:&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">infixExpression</span><span class="token punctuation">(</span>bt_tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h5 id="\u8F93\u51FA\uFF1A" tabindex="-1">\u8F93\u51FA\uFF1A <a class="header-anchor" href="#\u8F93\u51FA\uFF1A" aria-hidden="true">#</a></h5><div class="language-cpp line-numbers-mode"><pre><code>Create Tree
<span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token punctuation">;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">+</span><span class="token punctuation">;</span> <span class="token number">2</span><span class="token punctuation">,</span>a<span class="token punctuation">;</span> <span class="token number">3</span><span class="token punctuation">,</span>#<span class="token punctuation">;</span> <span class="token number">4</span><span class="token punctuation">,</span>#<span class="token punctuation">;</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">*</span><span class="token punctuation">;</span> <span class="token number">6</span><span class="token punctuation">,</span>b<span class="token punctuation">;</span> <span class="token number">7</span><span class="token punctuation">,</span>#<span class="token punctuation">;</span> <span class="token number">8</span><span class="token punctuation">,</span>#<span class="token punctuation">;</span> <span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token punctuation">;</span> <span class="token number">10</span><span class="token punctuation">,</span>c<span class="token punctuation">;</span> <span class="token number">11</span><span class="token punctuation">,</span>#<span class="token punctuation">;</span> <span class="token number">12</span><span class="token punctuation">,</span>#<span class="token punctuation">;</span> <span class="token number">13</span><span class="token punctuation">,</span>d<span class="token punctuation">;</span> <span class="token number">14</span><span class="token punctuation">,</span>#<span class="token punctuation">;</span> <span class="token number">15</span><span class="token punctuation">,</span>#<span class="token punctuation">;</span> <span class="token number">16</span><span class="token punctuation">,</span><span class="token operator">/</span><span class="token punctuation">;</span> <span class="token number">17</span><span class="token punctuation">,</span>e<span class="token punctuation">;</span> <span class="token number">18</span><span class="token punctuation">,</span>#<span class="token punctuation">;</span> <span class="token number">19</span><span class="token punctuation">,</span>#<span class="token punctuation">;</span> <span class="token number">20</span><span class="token punctuation">,</span>f<span class="token punctuation">;</span> <span class="token number">21</span><span class="token punctuation">,</span>#<span class="token punctuation">;</span> <span class="token number">22</span><span class="token punctuation">,</span>#<span class="token punctuation">;</span> 

preorder<span class="token punctuation">,</span>inorder<span class="token punctuation">,</span>postorder<span class="token operator">:</span>
<span class="token operator">-</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> #<span class="token punctuation">,</span> #<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> b<span class="token punctuation">,</span> #<span class="token punctuation">,</span> #<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">,</span> c<span class="token punctuation">,</span> #<span class="token punctuation">,</span> #<span class="token punctuation">,</span> d<span class="token punctuation">,</span> #<span class="token punctuation">,</span> #<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> #<span class="token punctuation">,</span> #<span class="token punctuation">,</span> f<span class="token punctuation">,</span> #<span class="token punctuation">,</span> #<span class="token punctuation">,</span>
#<span class="token punctuation">,</span> a<span class="token punctuation">,</span> #<span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">,</span> #<span class="token punctuation">,</span> b<span class="token punctuation">,</span> #<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> #<span class="token punctuation">,</span> c<span class="token punctuation">,</span> #<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">,</span> #<span class="token punctuation">,</span> d<span class="token punctuation">,</span> #<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">,</span> #<span class="token punctuation">,</span> e<span class="token punctuation">,</span> #<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">,</span> #<span class="token punctuation">,</span> f<span class="token punctuation">,</span> #<span class="token punctuation">,</span>
#<span class="token punctuation">,</span> #<span class="token punctuation">,</span> a<span class="token punctuation">,</span> #<span class="token punctuation">,</span> #<span class="token punctuation">,</span> b<span class="token punctuation">,</span> #<span class="token punctuation">,</span> #<span class="token punctuation">,</span> c<span class="token punctuation">,</span> #<span class="token punctuation">,</span> #<span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> <span class="token operator">+</span><span class="token punctuation">,</span> #<span class="token punctuation">,</span> #<span class="token punctuation">,</span> e<span class="token punctuation">,</span> #<span class="token punctuation">,</span> #<span class="token punctuation">,</span> f<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">,</span> 

coutLeaf<span class="token operator">:</span><span class="token number">6</span>

high<span class="token operator">=</span><span class="token number">5</span>

infixExpression<span class="token operator">:</span>
<span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token punctuation">(</span>b<span class="token operator">*</span><span class="token punctuation">(</span>c<span class="token operator">-</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>e<span class="token operator">/</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h5 id="\u5C42\u5E8F\u904D\u5386\uFF1A" tabindex="-1">\u5C42\u5E8F\u904D\u5386\uFF1A <a class="header-anchor" href="#\u5C42\u5E8F\u904D\u5386\uFF1A" aria-hidden="true">#</a></h5><p>\u601D\u8DEF\uFF1A\u5229\u7528\u961F\u5217</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token comment">//\u5C42\u5E8F\u904D\u5386\u4E8C\u53C9\u6811</span>
<span class="token keyword">void</span> <span class="token function">printBinTree</span><span class="token punctuation">(</span>btnode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    queue<span class="token operator">&lt;</span>btnode<span class="token operator">*</span><span class="token operator">&gt;</span> q<span class="token punctuation">;</span>
    btnode<span class="token operator">*</span> b<span class="token punctuation">;</span>

    <span class="token comment">//\u6811\u4E3A\u7A7A</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;treeNode is empty!&quot;</span> <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//\u6839\u8282\u70B9\u5165\u961F</span>
    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        b <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//\u62FF\u5230\u961F\u5934\uFF0C\u961F\u5934\u51FA\u961F</span>
        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> b<span class="token operator">-&gt;</span>c <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>  <span class="token comment">//\u6253\u5370\u5BF9\u5934\u7684\u6570\u636E</span>

        <span class="token comment">//\u5BF9\u5934\u7684\u5DE6\u5B69\u5B50\u5B58\u5728\u5C31\u5165\u961F</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">-&gt;</span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">//\u5BF9\u5934\u7684\u53F3\u5B69\u5B50\u5B58\u5728\u5C31\u5165\u961F</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>b<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>b<span class="token operator">-&gt;</span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span>   
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Create Tree&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    btnode<span class="token operator">*</span> bt_tree <span class="token operator">=</span> <span class="token function">creatTree</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>   
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">printBinTree</span><span class="token punctuation">(</span>bt_tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h3 id="\u9012\u5F52\u7B97\u6CD5\u7684\u975E\u9012\u5F52\u63CF\u8FF0" tabindex="-1">\u9012\u5F52\u7B97\u6CD5\u7684\u975E\u9012\u5F52\u63CF\u8FF0 <a class="header-anchor" href="#\u9012\u5F52\u7B97\u6CD5\u7684\u975E\u9012\u5F52\u63CF\u8FF0" aria-hidden="true">#</a></h3><div class="language-cpp line-numbers-mode"><pre><code><span class="token comment">//\u4E2D\u5E8F\u904D\u5386\u4E3A\u4F8B</span>
<span class="token keyword">void</span> <span class="token function">nonRecInorder</span><span class="token punctuation">(</span>btnode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>
    btnode <span class="token operator">*</span> p <span class="token operator">=</span> T<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>btnode<span class="token operator">*</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        st<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>lchild<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u53F3</span>
            st<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u540C\u65F6\u538B\u6808</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>lchild<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            p <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            st<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>c <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span><span class="token comment">//\u4E2D</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>rchild<span class="token punctuation">;</span><span class="token comment">//\u5DE6</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Create Tree&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    btnode<span class="token operator">*</span> bt_tree <span class="token operator">=</span> <span class="token function">creatTree</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">nonRecInorder</span><span class="token punctuation">(</span>bt_tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><div class="language-cpp line-numbers-mode"><pre><code><span class="token comment">//\u8BA1\u7B97\u53F6\u5B50\u6570\u7684\u975E\u9012\u5F52\u63CF\u8FF0</span>
<span class="token keyword">int</span> <span class="token function">nonRecCountLeaf</span><span class="token punctuation">(</span>btnode <span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token punctuation">{</span>  
  <span class="token keyword">if</span><span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  vector <span class="token operator">&lt;</span>btnode<span class="token operator">*</span><span class="token operator">&gt;</span> st<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span> <span class="token operator">||</span> <span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>T <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;node:&quot;</span> <span class="token operator">&lt;&lt;</span> T<span class="token operator">-&gt;</span>c <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//print</span>
      st<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">;</span>
      T <span class="token operator">=</span> T<span class="token operator">-&gt;</span>lchild<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
      T <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u4ECE\u7A7A\u90A3\u8FB9\u56DE\u6765</span>
      st<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span><span class="token punctuation">(</span>T<span class="token operator">-&gt;</span>lchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> T<span class="token operator">-&gt;</span>rchild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment">//\u5224\u65AD\u662F\u5426\u4E3A\u53F6\u5B50\u8282\u70B9</span>
        num<span class="token operator">++</span><span class="token punctuation">;</span>
      T <span class="token operator">=</span> T <span class="token operator">-&gt;</span> rchild<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Create Tree&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    btnode<span class="token operator">*</span> bt_tree <span class="token operator">=</span> <span class="token function">creatTree</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>   
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">nonRecCountLeaf</span><span class="token punctuation">(</span>bt_tree<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;num:&quot;</span> <span class="token operator">&lt;&lt;</span> x<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><h2 id="\u6811-1" tabindex="-1">\u6811 <a class="header-anchor" href="#\u6811-1" aria-hidden="true">#</a></h2><h3 id="\u6811\u7684\u8868\u793A" tabindex="-1">\u6811\u7684\u8868\u793A <a class="header-anchor" href="#\u6811\u7684\u8868\u793A" aria-hidden="true">#</a></h3><p>\u53CC\u4EB2\u8868\u793A\u6CD5\uFF1A</p><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20210609132010019.png" alt="image-20210609132010019" style="zoom:50%;"><p>\u5B69\u5B50\u94FE\u6CD5\uFF1A</p><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20210609132021545.png" alt="image-20210609132021545" style="zoom:50%;"><h3 id="\u8F6C\u6362" tabindex="-1">\u8F6C\u6362 <a class="header-anchor" href="#\u8F6C\u6362" aria-hidden="true">#</a></h3><p>\u5B69\u5B50\u5144\u5F1F\u8868\u793A\u6CD5\uFF1A</p><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20220120202134874.png" alt="image-20220120202134874" style="zoom:50%;"><p>\u5C06\u6811\u8F6C\u6362\u4E3A\u4E8C\u53C9\u6811\uFF1A</p><ul><li>\u52A0\u7EBF\uFF1A\u5728\u5144\u5F1F\u4E4B\u95F4\u52A0\u4E00\u8FDE\u7EBF\u3002</li><li>\u62B9\u7EBF\uFF1A\u5BF9\u6BCF\u4E2A\u7ED3\u70B9\uFF0C\u9664\u5176\u7B2C\u4E00\u5B69\u5B50\u5916\uFF0C\u53BB\u9664\u5176\u4E0E\u5176\u4F59\u5B69\u5B50\u4E4B\u95F4\u7684\u5173\u7CFB\u3002</li><li>\u65CB\u8F6C\uFF1A\u4EE5\u6811\u7684\u6839\u7ED3\u70B9\u4E3A\u8F74\u5FC3\uFF0C\u5C06\u6574\u68F5\u6811\u987A\u65F6\u9488\u8F6C45\`\u3002</li><li>\u6811\u8F6C\u6362\u4E3A\u4E8C\u53C9\u6811\u5176\u53F3\u5B50\u6811\u4E00\u5B9A\u4E3A\u7A7A\u3002</li></ul><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20210609132936133.png" alt="image-20210609132936133" style="zoom:50%;"><p>\u4E8C\u53C9\u6811\u8F6C\u6362\u4E3A\u6811\uFF1A</p><ul><li>\u52A0\u7EBF\uFF1A\u82E5p\u7ED3\u70B9\u662F\u53CC\u4EB2\u7ED3\u70B9\u7684\u5DE6\u5B69\u5B50\u5219\u5C06p\u7684\u53F3\u5B69\u5B50\uFF0C\u53F3\u5B69\u5B50\u7684\u53F3\u5B69\u5B50\uFF0C\xB7\xB7\xB7\xB7\xB7\xB7\u6CBF\u5206\u652F\u627E\u5230\u7684\u6240\u6709\u53F3\u5B69\u5B50\uFF0C\u90FD\u4E0Ep\u7684\u53CC\u4EB2\u8FDE\u8D77\u6765\u3002</li><li>\u62B9\u7EBF\uFF1A\u62B9\u6389\u539F\u4E8C\u53C9\u6811\u4E2D\u53CC\u4EB2\u4E0E\u53F3\u5B69\u5B50\u4E4B\u95F4\u7684\u8FDE\u7EBF\u3002</li><li>\u8C03\u6574\uFF1A\u5C06\u7ED3\u70B9\u6309\u5C42\u6B21\u6392\u5217\uFF0C\u5F62\u6210\u6811\u7ED3\u6784\u3002</li></ul><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20210609133312399.png" alt="image-20210609133312399" style="zoom:50%;"><p>\u68EE\u6797\u8F6C\u6362\u4E3A\u4E8C\u53C9\u6811\uFF1A\u5C06\u5404\u68F5\u6811\u5206\u522B\u8F6C\u6362\u6210\u4E8C\u53C9\u6811\uFF0C\u5C06\u6BCF\u68F5\u6811\u7684\u6839\u7ED3\u70B9\u7528\u7EBF\u76F8\u8FDE\u3002</p><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20220120202111246.png" alt="image-20220120202111246" style="zoom:67%;"><h2 id="\u54C8\u592B\u66FC\u6811" tabindex="-1">\u54C8\u592B\u66FC\u6811 <a class="header-anchor" href="#\u54C8\u592B\u66FC\u6811" aria-hidden="true">#</a></h2><h3 id="\u57FA\u7840\u6982\u5FF5-1" tabindex="-1">\u57FA\u7840\u6982\u5FF5 <a class="header-anchor" href="#\u57FA\u7840\u6982\u5FF5-1" aria-hidden="true">#</a></h3>`,88),i=n("ul",null,[n("li",null,[n("p",null,"\u8DEF\u5F84\uFF1A\u82E5\u6811\u4E2D\u5B58\u5728\u67D0\u4E2A\u7ED3\u70B9\u5E8F\u5217k_1,k_2\xB7\xB7\xB7\xB7\xB7\xB7k_j\u3002\u6EE1\u8DB3k_i\u662Fk_{i+1}\u7684\u53CC\u4EB2\uFF0C\u5219\u8BE5\u7ED3\u70B9\u5E8F\u5217\u662F\u6811\u4E0A\u7684\u4E00\u6761\u8DEF\u5F84\u3002")]),n("li",null,[n("p",null,"\u6811\u7684\u8DEF\u5F84\u957F\u5EA6\u662F\u6307\u6811\u6839\u5230\u6811\u4E2D\u6BCF\u4E00\u4E2A\u7ED3\u70B9\u7684\u8DEF\u5F84\u4E4B\u548C\u3002")]),n("li",null,[n("p",null,"\u5B8C\u5168\u4E8C\u53C9\u6811\u7684\u8DEF\u5F84\u957F\u5EA6\u6700\u77ED\u3002")]),n("li",null,[n("p",null,"\u7ED3\u70B9\u7684\u6743\uFF1A\u7ED9\u6811\u7684\u7ED3\u70B9\u8D4B\u4EE5\u4E00\u5B9A\u610F\u4E49\u7684\u6570\u503C\uFF0C\u79F0\u4E3A\u7ED3\u70B9\u7684\u5168\u6743\u3002")]),n("li",null,[n("p",null,"\u7ED3\u70B9\u7684\u5E26\u6743\u8DEF\u5F84\u957F\u5EA6\uFF1A\u4ECE\u6811\u6839\u5230\u67D0\u4E2A\u7ED3\u70B9\u7684\u8DEF\u5F84\u957F\u5EA6\u4E0E\u8BE5\u7ED3\u70B9\u7684\u6743\u7684\u79EF\u3002")]),n("li",null,[n("p",null,"\u6811\u7684\u5E26\u6743\u8DEF\u5F84\u957F\u5EA6\uFF1A\u6811\u4E2D\u6240\u6709\u53F6\u5B50\u7ED3\u70B9\u7684\u5E26\u6743\u8DEF\u5F84\u957F\u5EA6\u4E4B\u548C\u3002")]),n("li",null,[n("p",null,[n("strong",null,"\u54C8\u592B\u66FC\u6811\u7684\u5B9A\u4E49\uFF1A")]),n("ul",null,[n("li",null,"\u7531n\u4E2A\u5E26\u6743\u53F6\u5B50\u7ED3\u70B9\u6784\u6210\u7684\u4E8C\u53C9\u6811\u5177\u6709\u4E0D\u540C\u5F62\u6001\u3002"),n("li",null,"\u5176\u4E2DWPL\u6700\u5C0F\u7684\u4E8C\u53C9\u6811"),n("li",null,"\u53C8\u53EB\u505A\u6700\u4F18\u4E8C\u53C9\u6811\uFF0C\u6216\u6700\u4F73\u5224\u5B9A\u6811\u3002")]),n("p",null,[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",null,[n("semantics",null,[n("mrow",null,[n("mi",null,"w"),n("mi",null,"p"),n("mi",null,"l"),n("mo",null,"="),n("msubsup",null,[n("mo",null,"\u2211"),n("mrow",null,[n("mi",null,"k"),n("mo",null,"="),n("mn",null,"1")]),n("mrow",null,[n("mi",null,"n")])]),n("msub",null,[n("mi",null,"w"),n("mi",null,"k")]),n("msub",null,[n("mi",null,"l"),n("mi",null,"k")])]),n("annotation",{encoding:"application/x-tex"},"wpl = \\sum_{k=1}^{n}w_kl_k ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"strut",style:{height:"1.6513970000000002em"}}),n("span",{class:"strut bottom",style:{height:"2.9535100000000005em","vertical-align":"-1.302113em"}}),n("span",{class:"base displaystyle textstyle uncramped"},[n("span",{class:"mord mathit",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"mord mathit"},"p"),n("span",{class:"mord mathit",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mrel"},"="),n("span",{class:"mop op-limits"},[n("span",{class:"vlist"},[n("span",{style:{top:"1.202113em","margin-left":"0em"}},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),n("span",{class:"reset-textstyle scriptstyle cramped"},[n("span",{class:"mord scriptstyle cramped"},[n("span",{class:"mord mathit",style:{"margin-right":"0.03148em"}},"k"),n("span",{class:"mrel"},"="),n("span",{class:"mord mathrm"},"1")])])]),n("span",{style:{top:"-0.000005000000000032756em"}},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),n("span",null,[n("span",{class:"op-symbol large-op mop"},"\u2211")])]),n("span",{style:{top:"-1.250005em","margin-left":"0em"}},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),n("span",{class:"reset-textstyle scriptstyle uncramped"},[n("span",{class:"mord scriptstyle uncramped"},[n("span",{class:"mord mathit"},"n")])])]),n("span",{class:"baseline-fix"},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),s("\u200B")])])]),n("span",{class:"mord"},[n("span",{class:"mord mathit",style:{"margin-right":"0.02691em"}},"w"),n("span",{class:"vlist"},[n("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.02691em"}},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),n("span",{class:"reset-textstyle scriptstyle cramped"},[n("span",{class:"mord mathit",style:{"margin-right":"0.03148em"}},"k")])]),n("span",{class:"baseline-fix"},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),s("\u200B")])])]),n("span",{class:"mord"},[n("span",{class:"mord mathit",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"vlist"},[n("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"-0.01968em"}},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),n("span",{class:"reset-textstyle scriptstyle cramped"},[n("span",{class:"mord mathit",style:{"margin-right":"0.03148em"}},"k")])]),n("span",{class:"baseline-fix"},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),s("\u200B")])])])])])])])]),n("p",null,[n("em",null,"\u5176\u4E2D\uFF0Cw_k\u662F\u7B2Ci\u4E2A\u53F6\u5B50\u7ED3\u70B9\u7684\u6743\u503C\uFF0Cl_k\u662F\u6839\u5230\u7B2Ci\u4E2A\u53F6\u5B50\u7ED3\u70B9\u7684\u8DEF\u5F84\u957F\u5EA6\u3002")])])],-1),k=a(`<h3 id="\u521B\u5EFA\u54C8\u592B\u66FC\u6811\u4E0E\u54C8\u592B\u66FC\u7F16\u7801" tabindex="-1">\u521B\u5EFA\u54C8\u592B\u66FC\u6811\u4E0E\u54C8\u592B\u66FC\u7F16\u7801 <a class="header-anchor" href="#\u521B\u5EFA\u54C8\u592B\u66FC\u6811\u4E0E\u54C8\u592B\u66FC\u7F16\u7801" aria-hidden="true">#</a></h3><p><strong>\u521B\u5EFA\uFF1A</strong></p><p>\u521D\u59CB\u5316n\u4E2A\u6743\u503C\uFF0C\u5230forest\u7684\u524Dn\u4E2A\u5355\u5143\uFF0C\u4F5C\u4E3Aforest\u4E2Dn\u4E2A\u5B64\u7ACB\u7684\u6839\u7ED3\u70B9\u3002</p><ul><li><p>\u5C06\u524Dn\u4E2A\u5355\u5143\u7684\u53CC\u4EB2\u3001\u5DE6\u3001\u53F3\u5B69\u5B50\u6307\u9488\u5747\u7F6E\u4E3A0\u3002</p></li><li><p>\u4E0D\u59A8\u5C06\u4E0B\u6807\u4E3A0\u7684\u5355\u5143\u7559\u7A7A\u3002</p></li><li><div class="language-"><pre><code>foreach pos in(n+1~2n-1)
begin
	\u8FDB\u884C1\u6B21\u5408\u5E76\uFF0C\u4ECEfroest\u4E2D\u5220\u9664\u4E24\u68F5\u6811\uFF0C\u751F\u62101\u68F5\u65B0\u6811\uFF1A
		\u4ECEforest\u7684\u6839\u7ED3\u70B9\u4E2D\uFF0C\u9009\u53D6\u6839\u7ED3\u70B9\u6743\u503C\u6700\u5C0F\u3001\u6B21\u5C0F\u7684\u4E24\u68F5\u6811p1\u548Cp2\u3002
		\u5408\u5E76forest[p1]\u548Cforest[p2]\uFF0C\u751F\u6210\u65B0\u6839\u7ED3\u70B9forest[pos]
			\u7F6Eforest[pos].w = forest[p1].w + forest[p2].w
			\u7F6Eforest[p1]\u548Cforest[p2]\u5206\u522B\u4E3Aforest[pos]\u7684\u5DE6\u53F3\u5B69\u5B50\u3002
			\u7F6Eforest[p1]\u548Cforest[p2]\u7684\u53CC\u4EB2\u4E3Aforest[pos]
endforeach
return
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ul><p>**\u524D\u7F00\u7801\uFF1A**\u4EFB\u4E00\u5B57\u7B26\u7684\u7F16\u7801\uFF0C\u4E0D\u80FD\u662F\u5176\u4ED6\u5B57\u7B26\u7684\u524D\u7F00\u3002</p><ul><li>\u5C06\u503C\u4F5C\u4E3A\u7ED3\u70B9\u7684\u503C\uFF0C\u5C06\u6743\u91CD\u4F5C\u4E3A\u8FB9\u3002</li><li>\u6784\u9020\u6700\u4F18\u4E8C\u53C9\u6811</li><li>\u5C06\u6811\u4E2D\u6BCF\u4E2A\u7ED3\u70B9\u7684\u5DE6\u5206\u652F\u7F6E\u4E3A0\uFF0C\u53F3\u5206\u652F\u7F6E\u4E3A1\u3002</li><li>\u4ECE\u6839\u5230\u53F6\u5B50\u7ED3\u70B9\u7684\u4E00\u4E2A\u6807\u53F7\u5E8F\u5217\uFF0C\u5C31\u662F\u8BE5\u53F6\u5B50\u7ED3\u70B9\u7684\u7F16\u7801\u3002</li></ul><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20210609150810332.png" alt="image-20210609150810332" style="zoom:50%;"><p><strong>\u539F\u56E0\uFF1A\u6CA1\u6709\u4E00\u7247\u6811\u53F6\u662F\u5176\u4ED6\u6811\u53F6\u7684\u7956\u5148\uFF0C\u6240\u4EE5\u53F6\u5B50\u7ED3\u70B9\u7F16\u7801\u4E0D\u53EF\u80FD\u662F\u5176\u4ED6\u53F6\u5B50\u7ED3\u70B9\u7F16\u7801\u7684\u524D\u7F00\u3002</strong></p><h5 id="\u6570\u636E\u5904\u7406" tabindex="-1">\u6570\u636E\u5904\u7406 <a class="header-anchor" href="#\u6570\u636E\u5904\u7406" aria-hidden="true">#</a></h5><div class="language-python line-numbers-mode"><pre><code>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;huffmandata.txt&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;r&quot;</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
data<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><pre><code>&#39;b&#39;
</code></pre><div class="language-python line-numbers-mode"><pre><code>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        nums<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        nums<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>
nums
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><pre><code>[398964, 400200, 399318, 400002, 401516]
</code></pre><div class="language-python line-numbers-mode"><pre><code>weight <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
weight
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><pre><code>[0.199482, 0.2001, 0.199659, 0.200001, 0.200758]
</code></pre><div class="language-python line-numbers-mode"><pre><code>op <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.199482</span><span class="token punctuation">,</span> <span class="token number">0.2001</span><span class="token punctuation">,</span> <span class="token number">0.199659</span><span class="token punctuation">,</span> <span class="token number">0.200001</span><span class="token punctuation">,</span> <span class="token number">0.200758</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>
mem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
<span class="token builtin">len</span><span class="token punctuation">(</span>mem<span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><pre><code>10
</code></pre><h5 id="\u751F\u6210\u54C8\u592B\u66FC\u6811" tabindex="-1">\u751F\u6210\u54C8\u592B\u66FC\u6811 <a class="header-anchor" href="#\u751F\u6210\u54C8\u592B\u66FC\u6811" aria-hidden="true">#</a></h5><div class="language-python line-numbers-mode"><pre><code>op <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.199482</span><span class="token punctuation">,</span> <span class="token number">0.2001</span><span class="token punctuation">,</span> <span class="token number">0.199659</span><span class="token punctuation">,</span> <span class="token number">0.200001</span><span class="token punctuation">,</span> <span class="token number">0.200758</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
mem <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">]</span>  <span class="token comment"># \u6807\u8BB0\u662F\u5426\u7528\u8FC7</span>
temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># \u5B58\u50A8\u9006\u5E8F\u524D\u7684\u54C8\u592B\u66FC\u6811</span>
weizhi <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>weight<span class="token punctuation">)</span>
c <span class="token operator">=</span> n
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    min_1 <span class="token operator">=</span> <span class="token number">1</span>
    min_1_index <span class="token operator">=</span> <span class="token number">0</span>
    min_2 <span class="token operator">=</span> <span class="token number">1</span>
    min_2_index <span class="token operator">=</span> <span class="token number">0</span>

    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>mem<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min_1<span class="token punctuation">)</span><span class="token punctuation">:</span>
            min_1 <span class="token operator">=</span> op<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            min_1_index <span class="token operator">=</span> j
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>mem<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min_2<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>op<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> min_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            min_2 <span class="token operator">=</span> op<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            min_2_index <span class="token operator">=</span> j
    
    <span class="token comment"># \u6807\u8BB0</span>
    mem<span class="token punctuation">[</span>min_1_index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span>  <span class="token comment"># \u8FD9\u91CC\u53EA\u8981\u662F\u4E00\u4E2A\u8F83\u5927\u7684\u6570\u5C31\u884C</span>
    mem<span class="token punctuation">[</span>min_2_index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">20</span>
    temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>op<span class="token punctuation">[</span>min_1_index<span class="token punctuation">]</span><span class="token punctuation">)</span>
    temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>op<span class="token punctuation">[</span>min_2_index<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>min_1_index<span class="token punctuation">,</span>min_2_index<span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>min_1_index <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        weizhi<span class="token punctuation">.</span>append<span class="token punctuation">(</span>min_1_index<span class="token punctuation">)</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>min_2_index <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        weizhi<span class="token punctuation">.</span>append<span class="token punctuation">(</span>min_2_index<span class="token punctuation">)</span>
    op<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> op<span class="token punctuation">[</span>min_1_index<span class="token punctuation">]</span> <span class="token operator">+</span> op<span class="token punctuation">[</span>min_2_index<span class="token punctuation">]</span>
    c <span class="token operator">+=</span> <span class="token number">1</span>

<span class="token comment"># print(op)</span>
temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment"># \u9006\u5E8F</span>
huffmantree <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>op<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    huffmantree<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>weizhi<span class="token punctuation">)</span>
huffmantree

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><pre><code>0 2
3 1
4 5
6 7
[0, 2, 3, 1, 4]



[0,
 1,
 0.599899,
 0.40010100000000004,
 0.39914099999999997,
 0.200758,
 0.2001,
 0.200001,
 0.199659,
 0.199482]
</code></pre><h5 id="\u751F\u6210\u6700\u4F18\u524D\u7F00\u7801" tabindex="-1">\u751F\u6210\u6700\u4F18\u524D\u7F00\u7801 <a class="header-anchor" href="#\u751F\u6210\u6700\u4F18\u524D\u7F00\u7801" aria-hidden="true">#</a></h5><div class="language-python line-numbers-mode"><pre><code>l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>huffmantree<span class="token punctuation">)</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br></div></div><div class="language-python line-numbers-mode"><pre><code><span class="token comment"># \u751F\u6210\u7684\u5217\u8868\u65B9\u4FBF\u9006\u5E8F\u751F\u6210\u6B63\u786E\u7684\u7F16\u7801</span>
codes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>l<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># print(i)</span>
    codes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            codes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            codes<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        i <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
codes
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><pre><code>[-1, 1, 0, 0, -1, 0, 0, 0, -1, 1, 1, -1, 0, 1, -1, 1, 0]
</code></pre><div class="language-python line-numbers-mode"><pre><code><span class="token comment"># \u627E\u5230\u5BF9\u5E94\u7684\u4F4D\u7F6E</span>
element_src <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span>
element <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;x&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>element_src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    element<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> element_src<span class="token punctuation">[</span>weizhi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>

element

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><pre><code>[&#39;a&#39;, &#39;c&#39;, &#39;d&#39;, &#39;b&#39;, &#39;e&#39;]
</code></pre><div class="language-python line-numbers-mode"><pre><code>ele_encode <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
s <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
j <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>codes<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>codes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        ele_encode<span class="token punctuation">[</span>element<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> s
        j <span class="token operator">+=</span> <span class="token number">1</span>
        s <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        s <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>codes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

ele_encode
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><pre><code>{&#39;a&#39;: &#39;01&#39;, &#39;c&#39;: &#39;10&#39;, &#39;d&#39;: &#39;11&#39;, &#39;b&#39;: &#39;000&#39;, &#39;e&#39;: &#39;001&#39;}
</code></pre>`,28);function b(m,d,h,g,f,y){const p=e("Comment");return l(),o("div",null,[r,i,k,c(p)])}var _=t(u,[["render",b]]);export{v as __pageData,_ as default};
