import{_ as t,r as e,c as o,a as c,b as a,d as n,e as s,o as l}from"./app.91b9ffc3.js";const x='{"title":"\u6808\u548C\u961F\u5217","description":"","frontmatter":{"published":true,"date":"2022-1-22","tags":"\u7B97\u6CD5\u4E0E\u6570\u636E\u7ED3\u6784"},"headers":[{"level":2,"title":"\u6808","slug":"\u6808"},{"level":3,"title":"\u57FA\u7840\u6982\u5FF5","slug":"\u57FA\u7840\u6982\u5FF5"},{"level":3,"title":"\u987A\u5E8F\u6808","slug":"\u987A\u5E8F\u6808"},{"level":3,"title":"\u94FE\u5F0F\u6808","slug":"\u94FE\u5F0F\u6808"},{"level":3,"title":"\u6808\u7684\u5E94\u7528","slug":"\u6808\u7684\u5E94\u7528"},{"level":2,"title":"\u961F\u5217","slug":"\u961F\u5217"},{"level":3,"title":"\u57FA\u7840\u6982\u5FF5","slug":"\u57FA\u7840\u6982\u5FF5-1"},{"level":3,"title":"\u987A\u5E8F\u961F\u5217","slug":"\u987A\u5E8F\u961F\u5217"},{"level":3,"title":"\u94FE\u961F\u5217","slug":"\u94FE\u961F\u5217"},{"level":3,"title":"\u961F\u5217\u7684\u5E94\u7528\uFF08\u5B50\u96C6\u5212\u5206\u95EE\u9898\uFF09","slug":"\u961F\u5217\u7684\u5E94\u7528\uFF08\u5B50\u96C6\u5212\u5206\u95EE\u9898\uFF09"}],"relativePath":"\u6C47\u603B\u5206\u7C7B/\u7B97\u6CD5\u4E0E\u6570\u636E\u7ED3\u6784/03\u6808\u548C\u961F\u5217.md","lastUpdated":1642854759986}',u={},r=a('<h1 id="\u6808\u548C\u961F\u5217" tabindex="-1">\u6808\u548C\u961F\u5217 <a class="header-anchor" href="#\u6808\u548C\u961F\u5217" aria-hidden="true">#</a></h1><blockquote><p>\u672C\u7AE0\u4E3B\u8981\u4ECB\u7ECD\u5E76\u7528cpp\u4EE3\u7801\u4ECE\u96F6\u5B9E\u73B0\u4E86\u6808\u548C\u961F\u5217\u4E24\u4E2A\u6570\u636E\u7ED3\u6784\uFF0C\u540C\u65F6\u5F15\u51FA\u4E86\u9012\u5F52\u4EE5\u53CA\u6808\u5E27(\u51FD\u6570\u8C03\u7528)\u7684\u4ECB\u7ECD\uFF0C\u4EE5\u53CA\u5BF9\u6808\u548C\u961F\u5217\u7684\u76F8\u5173\u7ECF\u5178\u95EE\u9898\u7684\u89E3\u51B3\uFF0C\u5982\u8FD0\u7B97\u7B26\u4F18\u5148\u6570\u6CD5\u3001\u5730\u56FE\u56DB\u67D3\u8272\u3001\u5B50\u96C6\u5212\u5206\u95EE\u9898\u7B49\u3002</p><p>\u53EF\u4EE5\u8F6C\u8F7D\uFF0C\u4F46\u8BF7\u58F0\u660E\u6E90\u94FE\u63A5\uFF1A\u6587\u7AE0\u6E90\u94FE\u63A5<a href="https://justin3go.com" target="_blank" rel="noopener noreferrer">justin3go.com</a>(\u6709\u4E9Blatex\u516C\u5F0F\u67D0\u4E9B\u5E73\u53F0\u4E0D\u80FD\u6E32\u67D3\u53EF\u67E5\u770B\u8FD9\u4E2A\u7F51\u7AD9)</p></blockquote><h2 id="\u6808" tabindex="-1">\u6808 <a class="header-anchor" href="#\u6808" aria-hidden="true">#</a></h2><h3 id="\u57FA\u7840\u6982\u5FF5" tabindex="-1">\u57FA\u7840\u6982\u5FF5 <a class="header-anchor" href="#\u57FA\u7840\u6982\u5FF5" aria-hidden="true">#</a></h3><table><thead><tr><th>\u5B9A\u4E49</th><th>\u53EA\u80FD\u5728\u8868\u7684\u4E00\u7AEF\u8FDB\u884C\u63D2\u5165\u548C\u5220\u9664\u7684\u7EBF\u6027\u8868</th></tr></thead><tbody><tr><td>\u903B\u8F91\u7ED3\u6784</td><td>\u6570\u636E\u5143\u7D20\u4E4B\u95F4\u662F\u4E00\u5BF9\u4E00\u7684\u5173\u7CFB</td></tr><tr><td>\u5B58\u50A8\u7ED3\u6784</td><td>\u987A\u5E8F\u5B58\u50A8\u6216\u94FE\u5F0F\u5B58\u50A8</td></tr><tr><td>\u8FD0\u7B97\u89C4\u5219</td><td>\u53EA\u80FD\u5728\u6808\u9876\u8FD0\u7B97\uFF0C\u4E14\u8BBF\u95EE\u7ED3\u70B9\u65F6\u4F9D\u7167\u540E\u8FDB\u5148\u51FA\uFF08LIFO\uFF09\u6216\u5148\u8FDB\u540E\u51FA\uFF08FILO\uFF09\u7684\u539F\u5219</td></tr><tr><td>\u57FA\u672C\u64CD\u4F5C</td><td>\u5EFA\u6808\u3001\u5224\u65AD\u6808\u6EE1\u6216\u6808\u7A7A\u3001\u5165\u6808\u3001\u51FA\u6808\u3001\u53D6\u6808\u9876\u5143\u7D20\u503C</td></tr></tbody></table><h3 id="\u987A\u5E8F\u6808" tabindex="-1">\u987A\u5E8F\u6808 <a class="header-anchor" href="#\u987A\u5E8F\u6808" aria-hidden="true">#</a></h3><p><strong>\u5B9A\u4E49</strong>\uFF1A\u5229\u7528\u4E00\u7EC4\u5730\u5740\u8FDE\u7EED\u7684\u5B58\u50A8\u5355\u5143\uFF0C\u4F9D\u6B21\u5B58\u653E\u4ECE\u6808\u5E95\u5230\u6808\u9876\u7684\u6570\u636E\u5143\u7D20\u3002</p><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20220120160208230.png" alt="image-20220120160208230" style="zoom:80%;">',8),k=n("p",null,[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",null,[n("semantics",null,[n("mrow",null,[n("mi",null,"P"),n("mi",null,"U"),n("mi",null,"S"),n("mi",null,"H"),n("mo",null,":"),n("mi",null,"s"),n("mo",null,"\u2212"),n("mo",null,">"),n("mi",null,"e"),n("mi",null,"l"),n("mi",null,"e"),n("mo",null,"["),n("mi",null,"s"),n("mo",null,"\u2212"),n("mo",null,">"),n("mi",null,"t"),n("mi",null,"o"),n("mi",null,"p"),n("mo",null,"+"),n("mo",null,"+"),n("mo",null,"]"),n("mo",null,"="),n("msub",null,[n("mi",null,"a"),n("mrow",null,[n("mi",null,"n"),n("mo",null,"+"),n("mn",null,"1")])])]),n("annotation",{encoding:"application/x-tex"},"PUSH: s->ele[s->top++] = a_{n+1} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"strut",style:{height:"0.75em"}}),n("span",{class:"strut bottom",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"base displaystyle textstyle uncramped"},[n("span",{class:"mord mathit",style:{"margin-right":"0.13889em"}},"P"),n("span",{class:"mord mathit",style:{"margin-right":"0.10903em"}},"U"),n("span",{class:"mord mathit",style:{"margin-right":"0.05764em"}},"S"),n("span",{class:"mord mathit",style:{"margin-right":"0.08125em"}},"H"),n("span",{class:"mrel"},":"),n("span",{class:"mord mathit"},"s"),n("span",{class:"mbin"},"\u2212"),n("span",{class:"mrel"},">"),n("span",{class:"mord mathit"},"e"),n("span",{class:"mord mathit",style:{"margin-right":"0.01968em"}},"l"),n("span",{class:"mord mathit"},"e"),n("span",{class:"mopen"},"["),n("span",{class:"mord mathit"},"s"),n("span",{class:"mbin"},"\u2212"),n("span",{class:"mrel"},">"),n("span",{class:"mord mathit"},"t"),n("span",{class:"mord mathit"},"o"),n("span",{class:"mord mathit"},"p"),n("span",{class:"mbin"},"+"),n("span",{class:"mord"},"+"),n("span",{class:"mclose"},"]"),n("span",{class:"mrel"},"="),n("span",{class:"mord"},[n("span",{class:"mord mathit"},"a"),n("span",{class:"vlist"},[n("span",{style:{top:"0.15em","margin-right":"0.05em","margin-left":"0em"}},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),n("span",{class:"reset-textstyle scriptstyle cramped"},[n("span",{class:"mord scriptstyle cramped"},[n("span",{class:"mord mathit"},"n"),n("span",{class:"mbin"},"+"),n("span",{class:"mord mathrm"},"1")])])]),n("span",{class:"baseline-fix"},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),s("\u200B")])])])])])])])],-1),i=a(` POP: (s-&gt;top)--, e = s-&gt;ele[s-&gt;top] <p><em>\u6CE8\uFF1A\u987A\u5E8F\u6808\u4E0D\u4EC5\u9700\u8981\u5224\u65AD<strong>\u4E0B\u6EA2\uFF08\u6808\u7A7A\uFF09</strong>\uFF0C\u8FD8\u9700\u8981\u5224\u65AD<strong>\u4E0A\u6EA2\uFF08\u6808\u6EE1\uFF09</strong>\u3002</em></p><h3 id="\u94FE\u5F0F\u6808" tabindex="-1">\u94FE\u5F0F\u6808 <a class="header-anchor" href="#\u94FE\u5F0F\u6808" aria-hidden="true">#</a></h3><p><strong>\u5B9A\u4E49</strong>\uFF1A\u6808\u7684\u94FE\u5F0F\u5B58\u50A8\u7ED3\u6784\uFF0C\u7B80\u79F0\u94FE\u6808\uFF1B\u4E0E\u5355\u94FE\u8868\u7C7B\u4F3C<strong>\u94FE\u8868\u7684\u5C3E\u90E8\u662F\u6808\u5E95\uFF0C\u94FE\u8868\u7684\u5934\u90E8\u662F\u6808\u9876</strong>\u3002</p><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20220120160220887.png" alt="image-20220120160220887" style="zoom:67%;"><h3 id="\u6808\u7684\u5E94\u7528" tabindex="-1">\u6808\u7684\u5E94\u7528 <a class="header-anchor" href="#\u6808\u7684\u5E94\u7528" aria-hidden="true">#</a></h3><h5 id="\u8FD0\u7B97\u7B26\u4F18\u5148\u6570\u6CD5" tabindex="-1">\u8FD0\u7B97\u7B26\u4F18\u5148\u6570\u6CD5 <a class="header-anchor" href="#\u8FD0\u7B97\u7B26\u4F18\u5148\u6570\u6CD5" aria-hidden="true">#</a></h5><p><strong>\u95EE\u9898</strong>\uFF1A\u5BF9\u7B97\u672F\u8868\u8FBE\u5F0F\u6C42\u503C\uFF1A1 + 2 * 4 - 9/3</p><p><strong>\u89E3\u6CD5</strong></p><ul><li><p>\u5BF9\u6BCF\u79CD\u8FD0\u7B97\u7B26\u8D4B\u4E88\u4E00\u4E2A\u4F18\u5148\u6570\uFF0C\u5982\uFF1A</p><table><thead><tr><th style="text-align:center;">*</th><th style="text-align:center;">/</th><th style="text-align:center;">+</th><th style="text-align:center;">-</th><th style="text-align:center;">#</th></tr></thead><tbody><tr><td style="text-align:center;">2</td><td style="text-align:center;">2</td><td style="text-align:center;">1</td><td style="text-align:center;">1</td><td style="text-align:center;">0</td></tr></tbody></table></li><li><p>\u5176\u4E2D#\u662F\u8868\u8FBE\u5F0F\u7ED3\u675F\u7B26\u3002</p></li><li><p>\u4E00\u822C\u8BBE\u4E24\u4E2A\u6808\uFF1A</p><ul><li>\u8FD0\u7B97\u7B26\u6808\uFF08OPTR\uFF09\uFF1A\u5B58\u653E\u8FD0\u7B97\u7B26\u3002</li><li>\u64CD\u4F5C\u6570\u6808\uFF08OPND\uFF09\uFF1A\u5B58\u653E\u64CD\u4F5C\u6570\u3002</li></ul></li></ul><blockquote><p><em>\u4E2D\u7F00\u8868\u8FBE\u5F0Fa + b*c + (d * e + f) * g\uFF0C\u5176\u8F6C\u6362\u6210\u540E\u7F00\u8868\u8FBE\u5F0F\u5219\u4E3Aa b c * + d e * f + g * +\u3002\u8F6C\u6362\u8FC7\u7A0B\u9700\u8981\u7528\u5230\u6808\uFF0C\u5177\u4F53\u8FC7\u7A0B\u5982\u4E0B\uFF1A</em></p><p><em>1\uFF09\u5982\u679C\u9047\u5230\u64CD\u4F5C\u6570\uFF0C\u6211\u4EEC\u5C31\u76F4\u63A5\u5C06\u5176\u8F93\u51FA\u3002</em></p><p><em>2\uFF09\u5982\u679C\u9047\u5230\u64CD\u4F5C\u7B26\uFF0C\u5219\u6211\u4EEC\u5C06\u5176\u653E\u5165\u5230\u6808\u4E2D\uFF0C\u9047\u5230\u5DE6\u62EC\u53F7\u65F6\u6211\u4EEC\u4E5F\u5C06\u5176\u653E\u5165\u6808\u4E2D\u3002</em></p><p><em>3\uFF09\u5982\u679C\u9047\u5230\u4E00\u4E2A\u53F3\u62EC\u53F7\uFF0C\u5219\u5C06\u6808\u5143\u7D20\u5F39\u51FA\uFF0C\u5C06\u5F39\u51FA\u7684\u64CD\u4F5C\u7B26\u8F93\u51FA\u76F4\u5230\u9047\u5230\u5DE6\u62EC\u53F7\u4E3A\u6B62\u3002\u6CE8\u610F\uFF0C\u5DE6\u62EC\u53F7\u53EA\u5F39\u51FA\u5E76\u4E0D\u8F93\u51FA\u3002</em></p><p><em>4\uFF09\u5982\u679C\u9047\u5230\u4EFB\u4F55\u5176\u4ED6\u7684\u64CD\u4F5C\u7B26\uFF0C\u5982\uFF08\u201C+\u201D\uFF0C \u201C*\u201D\uFF0C\u201C\uFF08\u201D\uFF09\u7B49\uFF0C\u4ECE\u6808\u4E2D\u5F39\u51FA\u5143\u7D20\u76F4\u5230\u9047\u5230\u53D1\u73B0\u66F4\u4F4E\u4F18\u5148\u7EA7\u7684\u5143\u7D20(\u6216\u8005\u6808\u4E3A\u7A7A)\u4E3A\u6B62\u3002\u5F39\u51FA\u5B8C\u8FD9\u4E9B\u5143\u7D20\u540E\uFF0C\u624D\u5C06\u9047\u5230\u7684\u64CD\u4F5C\u7B26\u538B\u5165\u5230\u6808\u4E2D\u3002\u6709\u4E00\u70B9\u9700\u8981\u6CE8\u610F\uFF0C\u53EA\u6709\u5728\u9047\u5230&quot; ) &quot;\u7684\u60C5\u51B5\u4E0B\u6211\u4EEC\u624D\u5F39\u51FA&quot; ( &quot;\uFF0C\u5176\u4ED6\u60C5\u51B5\u6211\u4EEC\u90FD\u4E0D\u4F1A\u5F39\u51FA&quot; ( &quot;\u3002</em></p><p><em>5\uFF09\u5982\u679C\u6211\u4EEC\u8BFB\u5230\u4E86\u8F93\u5165\u7684\u672B\u5C3E\uFF0C\u5219\u5C06\u6808\u4E2D\u6240\u6709\u5143\u7D20\u4F9D\u6B21\u5F39\u51FA\u3002</em></p></blockquote><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stack&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> ranks <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token char">&#39;-&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token char">&#39;/&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token char">&#39;(&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">InfixToPostfix</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>infix<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>posfix<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&gt;</span> OPTR<span class="token punctuation">;</span><span class="token comment">//\u8FD0\u7B97\u7B26\u6808</span>
    OPTR<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//init_stack</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> infix<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        c <span class="token operator">=</span> infix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> <span class="token char">&#39;0&#39;</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">&#39;9&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            posfix<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> r <span class="token operator">=</span> ranks<span class="token punctuation">[</span>OPTR<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>ranks<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> r <span class="token operator">&amp;&amp;</span> ranks<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u62EC\u53F7\u540E\u9762\u5355\u72EC\u5904\u7406</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u4E0D\u52A0\u5165\u5176\u4ED6\u5B57\u7B26</span>
                    posfix<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> OPTR<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> 
                <span class="token keyword">if</span><span class="token punctuation">(</span>OPTR<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                OPTR<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>OPTR<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                r <span class="token operator">=</span> ranks<span class="token punctuation">[</span>OPTR<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">//\u5982\u679C\u662F(,\u5C31\u76F4\u63A5\u52A0\u5165\uFF0C\u4E0D\u7528\u505A\u4EFB\u4F55\u5904\u7406</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token char">&#39;)&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">char</span> t <span class="token operator">=</span> OPTR<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                r <span class="token operator">=</span> ranks<span class="token punctuation">[</span>OPTR<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span>t <span class="token operator">!=</span> <span class="token char">&#39;(&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u4E0D\u52A0\u5165\u5176\u4ED6\u5B57\u7B26</span>
                        posfix<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> OPTR<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    OPTR<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    t <span class="token operator">=</span> OPTR<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    r <span class="token operator">=</span>  ranks<span class="token punctuation">[</span>OPTR<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                OPTR<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u5F39\u51FA&#39;(&#39;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                OPTR<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print_chars</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span> chars<span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;!&#39;</span> <span class="token operator">&lt;&lt;</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// char test1[10] = {&#39;9&#39;,&#39;-&#39;,&#39;5&#39;,&#39;*&#39;,&#39;(&#39;,&#39;4&#39;,&#39;+&#39;,&#39;3&#39;,&#39;)&#39;,&#39;#&#39;};</span>
    <span class="token comment">// char result1[50];</span>
    <span class="token comment">// InfixToPostfix(test1, result1);</span>
    <span class="token comment">// print_chars(result1);</span>
    <span class="token comment">/*output 9!5!4!3!+!*!- */</span>

    <span class="token keyword">char</span> test2<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;*&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;(&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;/&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;(&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;+&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;)&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;#&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> result2<span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">InfixToPostfix</span><span class="token punctuation">(</span>test2<span class="token punctuation">,</span> result2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_chars</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*output 2!3!4!+!*!1!1!+!/ */</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br></div></div><h5 id="\u5730\u56FE\u56DB\u67D3\u8272" tabindex="-1">\u5730\u56FE\u56DB\u67D3\u8272 <a class="header-anchor" href="#\u5730\u56FE\u56DB\u67D3\u8272" aria-hidden="true">#</a></h5><p><strong>\u6808\u7684\u7279\u6027\uFF1A</strong></p><ul><li>\u5728\u67D0\u4E9B\u95EE\u9898\u7684\u6C42\u89E3\u4E2D\u5E38\u4F7F\u7528\u8BD5\u63A2\u65B9\u6CD5\uFF0C\u5F53\u67D0\u4E00\u8DEF\u5F84\u53D7\u963B\u65F6\uFF0C\u9700\u9006\u5E8F\u9000\u56DE\uFF0C\u91CD\u65B0\u9009\u62E9\u8DEF\u5F84\u3002</li><li>\u53EF\u5229\u7528\u6808\u8BB0\u5F55\u66FE\u5230\u8FBE\u7684\u6BCF\u4E00\u72B6\u6001\uFF0C\u6808\u9876\u72B6\u6001\u5373\u662F\u56DE\u9000\u7684\u7B2C\u4E00\u7AD9\u3002</li></ul><p>\u95EE\u9898\uFF1A\u7528\u4E0D\u591A\u4E8E\u56DB\u79CD\u989C\u8272\u5BF9\u5730\u56FE\u7740\u8272\uFF0C\u4F7F\u76F8\u90BB\u5730\u533A\u4E0D\u91CD\u8272\u3002</p><p><strong>\u89E3\u6CD5\uFF1A</strong></p><ul><li>\u4ECE1\u53F7\u5730\u533A\u5F00\u59CB\u9010\u4E00\u67D3\u8272\u6BCF\u4E00\u4E2A\u5730\u533A\u9010\u6B21\u7528\u8272\u53F71\u30012\u30013\u30014\u8FDB\u884C\u8BD5\u63A2\u3002</li><li>\u82E5\u5F53\u524D\u6240\u53D6\u7684\u8272\u53F7\u4E0E\u5468\u56F4\u5DF2\u67D3\u8272\u7684\u5730\u533A\u4E0D\u91CD\u8272\uFF0C\u5219\u7528\u6808\u8BB0\u4E0B\u8BE5\u5730\u533A\u7684\u8272\u53F7\uFF0C\u5426\u5219\u4F9D\u6B21\u7528\u4E0B\u4E00\u8272\u53F7\u8FDB\u884C\u8BD5\u63A2\u3002</li><li>\u82E5\u51FA\u73B0\u75281~4\u8272\u5747\u4E0E\u76F8\u90BB\u5730\u533A\u91CD\u8272\uFF0C\u5219\u9700\u9000\u56DE\uFF0C\u4FEE\u6539\u4E0A\u4E00\u5730\u533A\u7684\u8272\u53F7\uFF1A\u9000\u6808\u56DE\u6EAF\uFF0C\u4FEE\u6539\u5F53\u524D\u6808\u9876\u7684\u8272\u53F7\u3002</li></ul><p>detail:</p><p>\u4F7F\u7528\u4E00\u4E2A\u5173\u7CFB\u77E9\u9635\u5B58\u50A8\u5730\u533A\u4E0E\u5730\u533A\u4E4B\u95F4\u662F\u5426\u76F8\u90BB</p><p>\u4F2A\u4EE3\u7801\uFF1A</p><div class="language-python line-numbers-mode"><pre><code><span class="token keyword">for</span> r <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># p\u4E3A1~7\u7684\u57CE\u5E02\u53F7</span>
	<span class="token keyword">for</span> ci <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># c\u4E3A1~4\u7684\u8272\u53F7</span>
    	<span class="token keyword">for</span> r <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># \u4F9D\u6B21\u8BD5\u63A2\u76F8\u90BB\u57CE\u5E02\u662F\u5426\u67D3\u8FC7\u989C\u8272ci</span>
            step<span class="token punctuation">:</span><span class="token punctuation">{</span>\u662F\uFF1A\u56DE\u9000\uFF1B\u5426\uFF1A\u67D3\u8272<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20220120160234577.png" alt="image-20220120160234577" style="zoom:80%;"><div class="language-cpp line-numbers-mode"><pre><code><span class="token comment">/**gb2312**/</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token comment">//data</span>
string name<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">&quot;\u5E7F\u897F&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u5E7F\u4E1C&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u4E91\u5357&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u8D35\u5DDE&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u6E56\u5357&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u6C5F\u897F&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u798F\u5EFA&quot;</span><span class="token punctuation">,</span>
              <span class="token string">&quot;\u6D59\u6C5F&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u5B89\u5FBD&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u6E56\u5317&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u91CD\u5E86&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u56DB\u5DDD&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u897F\u85CF&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u9752\u6D77&quot;</span><span class="token punctuation">,</span>
              <span class="token string">&quot;\u65B0\u7586&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u7518\u8083&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u9655\u897F&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u5B81\u590F&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u5185\u8499&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u5317\u4EAC&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u9ED1\u9F99\u6C5F&quot;</span><span class="token punctuation">,</span>
              <span class="token string">&quot;\u5409\u6797&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u8FBD\u5B81&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u5929\u6D25&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u6CB3\u5317&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u5C71\u897F&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u6CB3\u5357&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u6C5F\u82CF&quot;</span><span class="token punctuation">,</span>
              <span class="token string">&quot;\u5C71\u4E1C&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u4E0A\u6D77&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u6D77\u5357&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u53F0\u6E7E&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u9999\u6E2F&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;\u6FB3\u95E8&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> map<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>\u7701\u7565<span class="token punctuation">}</span> <span class="token comment">//\u4E8C\u7EF4\u5173\u7CFB\u77E9\u9635</span>

vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u627E\u67D0\u4E00\u4E2A\u57CE\u5E02\u4E0E\u5176\u4ED6\u54EA\u4E9B\u57CE\u5E02\u6709\u5173\u7CFB</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> relationship<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u8FD9\u91CCj&lt;i\u662F\u56E0\u4E3A\u53EA\u9700\u8981\u627E\u524D\u9762\u6D82\u8FC7\u8272\u7684\u662F\u5426\u91CD\u590D</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            relationship<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> relationship<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print_vec</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> vec<span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&lt;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> vec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;{&quot;</span><span class="token operator">&lt;&lt;</span> name<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> vec<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;}&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&gt;&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//\u975E\u9012\u5F52\u89E3\u6CD5</span>
<span class="token keyword">void</span> <span class="token function">solution1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> color_stack<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//i\u4E3A\u6240\u6709\u57CE\u5E02\uFF0Cc\u4EE3\u88684\u79CD\u989C\u8272</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u6D82\u7B2Ci\u4E2A\u57CE\u5E02</span>
        temp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        temp <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//temp\u4E3A\u4E0E\u5F53\u524Di\u6709\u5173\u7CFB\u4E14\u5DF2\u7ECF\u6D82\u8FC7\u8272\u7684\u57CE\u5E02</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>c <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">int</span> flag1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>temp<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>color_stack<span class="token punctuation">[</span>temp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
                        flag1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u8BF4\u660E\u5F53\u524D\u989C\u8272\u4E0D\u80FD\u7528</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>flag1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u6D82\u8272</span>
                color_stack<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u6CA1\u6709\u989C\u8272\u53EF\u7528,\u5411\u4E0A\u5224\u65AD\u4E00\u6B21</span>
            c <span class="token operator">=</span> color_stack<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
            color_stack<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            temp<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            temp <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>color_stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span><span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u904D\u5386\u540E\u9762\u51E0\u79CD\u989C\u8272\u8FDB\u884C\u6D82\u8272</span>
                <span class="token keyword">int</span> flag2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>temp<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> temp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>color_stack<span class="token punctuation">[</span>temp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>
                            flag2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u8BF4\u660E\u5F53\u524D\u989C\u8272\u4E0D\u80FD\u7528</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>flag2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u6D82\u8272</span>
                    color_stack<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                c<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">print_vec</span><span class="token punctuation">(</span>color_stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*&lt;{\u5E7F\u897F: 0}, {\u5E7F\u4E1C: 1}, {\u4E91\u5357: 1}, {\u8D35\u5DDE: 2}, {\u6E56\u5357: 3},
     {\u6C5F\u897F: 0}, {\u798F\u5EFA: 2}, {\u6D59\u6C5F: 1}, {\u5B89\u5FBD: 2}, {\u6E56\u5317: 1}, 
     {\u91CD\u5E86: 0}, {\u56DB\u5DDD: 3}, {\u897F\u85CF: 0}, {\u9752\u6D77: 1}, {\u65B0\u7586: 2},
     {\u7518\u8083: 0}, {\u9655\u897F: 2}, {\u5B81\u590F: 1}, {\u5185\u8499: 3}, {\u5317\u4EAC: 0}, 
     {\u9ED1\u9F99\u6C5F: 0}, {\u5409\u6797: 1}, {\u8FBD\u5B81: 0}, {\u5929\u6D25: 1}, {\u6CB3\u5317: 2}, 
     {\u5C71\u897F: 0}, {\u6CB3\u5357: 3}, {\u6C5F\u82CF: 0}, {\u5C71\u4E1C: 1}, {\u4E0A\u6D77: 2}, 
     {\u6D77\u5357: 0}, {\u53F0\u6E7E: 0}, {\u9999\u6E2F: 0}, {\u6FB3\u95E8: 0}, &gt;
    */</span>
<span class="token punctuation">}</span>
<span class="token comment">// \u9012\u5F52\u89E3\u6CD5</span>
<span class="token keyword">int</span> <span class="token function">isOk</span><span class="token punctuation">(</span><span class="token keyword">int</span> metrix<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> city<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> current<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>current<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>metrix<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>city<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>city<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token comment">//\u4ED6\u4EEC\u4E4B\u95F4\u662F\u76F8\u90BB\u4E14\u6D82\u7684\u662F\u540C\u4E00\u79CD\u989C\u8272</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">color</span><span class="token punctuation">(</span><span class="token keyword">int</span> metrix<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> city<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> sum<span class="token punctuation">,</span><span class="token keyword">int</span> current<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>current<span class="token operator">&lt;=</span>sum<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>     <span class="token comment">//colored current city</span>
        <span class="token punctuation">{</span>
            city<span class="token punctuation">[</span>current<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isOk</span><span class="token punctuation">(</span>metrix<span class="token punctuation">,</span>city<span class="token punctuation">,</span>current<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">{</span>
                <span class="token function">color</span><span class="token punctuation">(</span>metrix<span class="token punctuation">,</span>city<span class="token punctuation">,</span>sum<span class="token punctuation">,</span>current<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//colored next city</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token comment">//\u6CE8\u610F\u8FD9\u4E2A\u5FAA\u73AF\u548C\u9012\u5F52\u7684\u7ED3\u5408\uFF0C\u633A\u5DE7\u5999\u7684\u3002</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token comment">//solution1:</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;****************1***************&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">solution1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//solution2:</span>
    <span class="token keyword">int</span> city<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">color</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span>city<span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//print</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;****************2***************&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&lt;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">34</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;{&quot;</span><span class="token operator">&lt;&lt;</span> name<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> city<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;}&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&gt;&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token comment">//\u7ED3\u679C\u4E00\u81F4</span>
    <span class="token comment">// for(int i = 0; i &lt; 34; i++){</span>
    <span class="token comment">//     cout  &lt;&lt; city[i]  &lt;&lt; &quot;, &quot;;</span>
    <span class="token comment">// }</span>
    <span class="token comment">//color = [0, 1, 1, 2, 3, 0, 2, 1, 2, 1, 0, 3, 0, 1, 2, 0, 2, 1, 3, 0, 0, 1, 0, 1, 2, 0, 3, 0, 1, 2, 0, 0, 0, 0]</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br></div></div><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20220120160248874.png" alt="image-20220120160248874" style="zoom:67%;"><h5 id="\u51FD\u6570\u8C03\u7528" tabindex="-1">\u51FD\u6570\u8C03\u7528 <a class="header-anchor" href="#\u51FD\u6570\u8C03\u7528" aria-hidden="true">#</a></h5><ul><li>\u6808\u662F\u5B58\u50A8\u5668\u7684\u4E00\u4E2A\u533A\u57DF\u3002</li><li>\u4E00\u822C\u4F7F\u7528\u6808\u5B9E\u73B0\u51FD\u6570\u8C03\u7528\u3002</li><li>\u51FD\u6570\u5360\u7528\u7684\u533A\u57DF\u88AB\u79F0\u4F5C\u51FD\u6570\u7684\u6808\u5E27\u3002</li><li>\u51FD\u6570\u8C03\u7528\u65F6\uFF0C\u4E3A\u88AB\u8C03\u7528\u7684\u51FD\u6570\u5206\u914D\u6808\u5E27\uFF0C\u5B58\u653E\u51FD\u6570\u521B\u5EFA\u7684\u5C40\u90E8\uFF08\u4E34\u65F6\uFF09\u53D8\u91CF\u7B49\u4FE1\u606F\u3002</li><li>\u51FD\u6570\u5D4C\u5957\u8C03\u7528\u65F6\uFF0C\u5806\u6808\u4E2D\u4F1A\u540C\u65F6\u5B58\u5728\u591A\u4E2A\u51FD\u6570\u7684\u6808\u5E27\u3002</li></ul><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20220120160301664.png" alt="image-20220120160301664" style="zoom:80%;"><h5 id="\u9012\u5F52" tabindex="-1">\u9012\u5F52 <a class="header-anchor" href="#\u9012\u5F52" aria-hidden="true">#</a></h5><p>\u5B9A\u4E49\uFF1A\u82E5\u4E00\u4E2A\u8FC7\u7A0B\u76F4\u63A5\u5730\u6216\u95F4\u63A5\u5730<strong>\u8C03\u7528\u81EA\u5DF1</strong>\uFF0C\u5219\u79F0\u8FD9\u4E2A\u8FC7\u7A0B\u662F\u9012\u5F52\u7684\u3002</p><p>\u5206\u7C7B\uFF1A\u76F4\u63A5\u9012\u5F52\u4E0E\u95F4\u63A5\u9012\u5F52\u3002</p><p>\u6761\u4EF6\uFF1A</p>`,32),b=n("ul",null,[n("li",null,[n("p",null,"\u89E3\u51B3\u95EE\u9898\u65F6\uFF0C\u53EF\u628A\u4E00\u4E2A\u95EE\u9898\u8F6C\u5316\u4E3A\u4E00\u4E2A\u65B0\u7684\u95EE\u9898\u3002")]),n("li",null,[n("p",null,"\u8FD9\u4E2A\u65B0\u95EE\u9898\u7684\u89E3\u6CD5\u4E0E\u539F\u95EE\u9898\u7684\u89E3\u6CD5\u76F8\u540C\uFF0C\u53EA\u662F\u6240\u5904\u7406\u7684\u5BF9\u8C61\u4E0D\u540C\u3002")]),n("li",null,[n("p",null,"\u5FC5\u987B\u6709\u7ED3\u675F\u9012\u5F52\u7684\u6761\u4EF6\uFF0C\u5426\u5219\u9012\u5F52\u5C06\u65E0\u4F11\u6B62\u5730\u8FDB\u884C\uFF0C\u5BFC\u81F4\u8017\u5C3D\u7CFB\u7EDF\u8D44\u6E90\u3002")]),n("li",null,[n("p",null,[n("strong",null,"\u6570\u636E\u7ED3\u6784"),s("\u662F\u9012\u5F52\u7684\uFF0C\u5982\u4E8C\u53C9\u6811\u3002")])]),n("li",null,[n("p",null,[n("strong",null,"\u95EE\u9898\u7684\u89E3\u6CD5"),s("\u662F\u9012\u5F52\u7684\uFF0C\u5982\u6C49\u8BFA\u5854\u3001\u5730\u56FE\u56DB\u67D3\u8272\u3001\u8D70\u8FF7\u5BAB\u7B49\u3002")]),n("ul",null,[n("li",null,[n("p",null,"\u5927\u95EE\u9898\u8F6C\u6362\u4E3A\u51E0\u4E2A\u5C0F\u95EE\u9898\uFF0C\u5C0F\u95EE\u9898\u8FDB\u4E00\u6B65\u5206\u89E3\u4E3A\u66F4\u5C0F\u7684\u5C0F\u95EE\u9898\uFF0C\u76F4\u5230\u9012\u5F52\u51FA\u53E3\u4E3A\u6B62\u3002")]),n("li",null,[n("p",null,"\u9012\u5F52\u6A21\u578B\u7531\u9012\u5F52\u51FA\u53E3\u548C\u9012\u5F52\u4F53\u4E24\u90E8\u5206\u7EC4\u6210\uFF0C\u524D\u8005\u786E\u5B9A\u9012\u5F52\u5408\u9002\u4E3A\u6B62\uFF0C\u540E\u8005\u786E\u5B9A\u9012\u5F52\u7684\u65B9\u5F0F\u3002"),n("p",null,[n("span",{class:"katex-display"},[n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",null,[n("semantics",null,[n("mrow",null,[n("mi",null,"n"),n("mo",null,"!"),n("mo",null,"="),n("mrow",null,[n("mo",{fence:"true"},"{"),n("mtable",null,[n("mtr",null,[n("mtd",null,[n("mrow")]),n("mtd",null,[n("mrow",null,[n("mtext",null,[n("mn",null,"1")]),n("mo",{separator:"true"},","),n("mi",null,"n"),n("mo",null,"="),n("mn",null,"0")])])]),n("mtr",null,[n("mtd",null,[n("mrow")]),n("mtd",null,[n("mrow",null,[n("mtext",null,[n("mi",{mathvariant:"normal"},"n")]),n("mo",null,"\u2217"),n("mo",null,"("),n("mi",null,"n"),n("mo",null,"\u2212"),n("mn",null,"1"),n("mo",null,")"),n("mo",null,"!"),n("mo",{separator:"true"},","),n("mi",null,"n"),n("mo",null,">"),n("mo",null,"="),n("mn",null,"1")])])])])])]),n("annotation",{encoding:"application/x-tex"},"n! = \\begin{cases} & \\text 1 ,n=0\\\\ & \\text n*(n-1)!, n>=1 \\end{cases} ")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"strut",style:{height:"1.75em"}}),n("span",{class:"strut bottom",style:{height:"3.0000299999999998em","vertical-align":"-1.25003em"}}),n("span",{class:"base displaystyle textstyle uncramped"},[n("span",{class:"mord mathit"},"n"),n("span",{class:"mclose"},"!"),n("span",{class:"mrel"},"="),n("span",{class:"minner displaystyle textstyle uncramped"},[n("span",{class:"style-wrap reset-textstyle textstyle uncramped",style:{top:"0em"}},[n("span",{class:"delimsizing size4"},"{")]),n("span",{class:"mord"},[n("span",{class:"mtable"},[n("span",{class:"col-align-l"},[n("span",{class:"vlist"},[n("span",{style:{top:"-0.6819999999999999em"}},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),n("span",{class:"mord displaystyle textstyle uncramped"})]),n("span",{style:{top:"0.7579999999999999em"}},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),n("span",{class:"mord displaystyle textstyle uncramped"})]),n("span",{class:"baseline-fix"},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),s("\u200B")])])]),n("span",{class:"arraycolsep",style:{width:"1em"}}),n("span",{class:"col-align-l"},[n("span",{class:"vlist"},[n("span",{style:{top:"-0.6819999999999999em"}},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),n("span",{class:"mord displaystyle textstyle uncramped"},[n("span",{class:"text mord displaystyle textstyle uncramped"},[n("span",{class:"mord mathrm"},"1")]),n("span",{class:"mpunct"},","),n("span",{class:"mord mathit"},"n"),n("span",{class:"mrel"},"="),n("span",{class:"mord mathrm"},"0")])]),n("span",{style:{top:"0.7579999999999999em"}},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),n("span",{class:"mord displaystyle textstyle uncramped"},[n("span",{class:"text mord displaystyle textstyle uncramped"},[n("span",{class:"mord mathrm"},"n")]),n("span",{class:"mbin"},"\u2217"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathit"},"n"),n("span",{class:"mbin"},"\u2212"),n("span",{class:"mord mathrm"},"1"),n("span",{class:"mclose"},")"),n("span",{class:"mclose"},"!"),n("span",{class:"mpunct"},","),n("span",{class:"mord mathit"},"n"),n("span",{class:"mrel"},">"),n("span",{class:"mrel"},"="),n("span",{class:"mord mathrm"},"1")])]),n("span",{class:"baseline-fix"},[n("span",{class:"fontsize-ensurer reset-size5 size5"},[n("span",{style:{"font-size":"0em"}},"\u200B")]),s("\u200B")])])])])]),n("span",{class:"sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"})])])])])])])])])])],-1),m=a(`<p>\u9012\u5F52\u7B97\u6CD5\u7684\u975E\u9012\u5F52\u63CF\u8FF0\uFF1A\u8003\u8651\u5230**\u6808\u5E27\u7684\u6A21\u578B\uFF08\u7CFB\u7EDF\u6808\u7684\u8C03\u7528\uFF09**\u5C31\u5F88\u597D\u7406\u89E3\u3002</p><div class="language-cpp line-numbers-mode"><pre><code>\\<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>\u9012\u5F52\u89E3\u6CD5<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>\\
<span class="token keyword">int</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">return</span> n<span class="token operator">*</span><span class="token function">fac</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">fac</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><div class="language-cpp line-numbers-mode"><pre><code>\\<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>\u975E\u9012\u5F52\u89E3\u6CD5<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>\\
<span class="token keyword">int</span> <span class="token function">fac</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>n <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token function">push</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> p<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">)</span>
        s <span class="token operator">*=</span> <span class="token function">pop</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token function">fac</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p><em>\u4E24\u79CD\u89E3\u6CD5\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E0E\u7A7A\u95F4\u590D\u6742\u5EA6\u90FD\u662F\u4E00\u6837\u7684\u3002</em></p><h2 id="\u961F\u5217" tabindex="-1">\u961F\u5217 <a class="header-anchor" href="#\u961F\u5217" aria-hidden="true">#</a></h2><h3 id="\u57FA\u7840\u6982\u5FF5-1" tabindex="-1">\u57FA\u7840\u6982\u5FF5 <a class="header-anchor" href="#\u57FA\u7840\u6982\u5FF5-1" aria-hidden="true">#</a></h3><table><thead><tr><th>\u961F\u5217\u5B9A\u4E49</th><th>\u53EA\u80FD\u5728\u8868\u7684\u4E00\u7AEF\u8FDB\u884C\u63D2\u5165\uFF0C\u5728\u8868\u7684\u53E6\u4E00\u7AEF\u8FDB\u884C\u5220\u9664\u7684\u7EBF\u6027\u8868</th></tr></thead><tbody><tr><td>\u903B\u8F91\u7ED3\u6784</td><td>\u5143\u7D20\u4E4B\u95F4\u662F\u4E00\u5BF9\u4E00\u7684\u5173\u7CFB</td></tr><tr><td>\u5B58\u50A8\u7ED3\u6784</td><td>\u987A\u5E8F\u961F\u5217\u548C\u94FE\u961F\u5217</td></tr><tr><td>\u8FD0\u7B97\u89C4\u5219</td><td>\u961F\u5C3E\u5165\u961F\u3001\u961F\u5934\u51FA\u961F\u3001\u9075\u5FAA\u5148\u8FDB\u5148\u51FA\uFF08FIFO\uFF09\u7684\u539F\u5219</td></tr><tr><td>\u57FA\u672C\u64CD\u4F5C</td><td>\u5165\u961F\u3001\u51FA\u961F\u3001\u5EFA\u7A7A\u961F\u5217\u3001\u5224\u961F\u7A7A\u6216\u5BF9\u6EE1</td></tr></tbody></table><h3 id="\u987A\u5E8F\u961F\u5217" tabindex="-1">\u987A\u5E8F\u961F\u5217 <a class="header-anchor" href="#\u987A\u5E8F\u961F\u5217" aria-hidden="true">#</a></h3><p>\u961F\u5217\u7684\u987A\u5E8F\u5B58\u50A8\uFF0C\u79F0\u4E3A\u987A\u5E8F\u961F\u5217\u3002\u7531\u5B58\u653E\u5143\u7D20\u7684\u987A\u5E8F\u8868\u3001\u961F\u5934\u6307\u9488\u3001\u961F\u5C3E\u6307\u9488\u4E09\u90E8\u5206\u7EC4\u6210\u3002</p><p>\u987A\u5E8F\u5B58\u50A8\u7684\u4E24\u4E2A\u95EE\u9898\uFF1A</p><ul><li><p>\u666E\u901A\u961F\u5217\u51FA\u73B0\u7684\u5047\u4E0A\u6EA2\u7684\u95EE\u9898\uFF1A\u4F7F\u7528<strong>\u5FAA\u73AF\u961F\u5217</strong>\u89E3\u51B3\uFF1A</p><ul><li><p>\u628A\u961F\u5217\u8BBE\u60F3\u4E3A\u73AF\u5F62\uFF08\u82E5rear+1 == M, \u5219\u4EE4rear=0\uFF09</p></li><li><p>\u5B9E\u73B0\uFF1A\u5229\u7528\u6A21\u8FD0\u7B97</p></li><li><p>\u5165\u961F\uFF1Arear = (rear + 1)%M; sq[rear] = x;</p></li><li><p>\u51FA\u961F\uFF1A front = (front + 1)%M; x = sq[front];</p><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20220120160311145.png" alt="image-20220120160311145" style="zoom:80%;"></li></ul></li><li><p>\u961F\u7A7A\u4E0E\u961F\u6EE1\u7684\u5224\u5B9A\u6761\u4EF6\u76F8\u540C\uFF1A<strong>\u5C11\u7528\u4E00\u4E2A\u5143\u7D20\u7A7A\u95F4</strong></p><ul><li><strong>\u961F\u7A7A</strong>\uFF1Afront == rear</li><li><strong>\u961F\u6EE1</strong>\uFF1A\uFF08rear + 1\uFF09%M == front</li></ul></li></ul><p>\u521D\u59CB\u5316\uFF1A</p><div class="language-cpp line-numbers-mode"><pre><code>cquenetp <span class="token operator">*</span><span class="token function">initquene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cquenetp <span class="token operator">*</span>q<span class="token punctuation">;</span>
    q <span class="token operator">=</span> <span class="token keyword">new</span> cquenetp<span class="token punctuation">;</span>
    <span class="token comment">//\u5C06\u961F\u5217\u5934\u5C3E\u6307\u9488\u7F6E\u4E3A0</span>
    q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> q<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u5165\u961F\uFF1A</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>M <span class="token operator">==</span> q<span class="token operator">-&gt;</span>front<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//\u5224\u961F\u6EE1</span>
    q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>M<span class="token punctuation">;</span>  <span class="token comment">//\u5165\u961F</span>
    q<span class="token operator">-&gt;</span>v<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u51FA\u961F\uFF1A</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>front <span class="token operator">==</span> q<span class="token operator">-&gt;</span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment">//\u5224\u961F\u7A7A</span>
    q<span class="token operator">-&gt;</span>front<span class="token operator">=</span> <span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>M<span class="token punctuation">;</span>  <span class="token comment">//\u51FA\u961F</span>
    x <span class="token operator">=</span> q<span class="token operator">-&gt;</span>v<span class="token punctuation">[</span>q<span class="token operator">-&gt;</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> x
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="\u94FE\u961F\u5217" tabindex="-1">\u94FE\u961F\u5217 <a class="header-anchor" href="#\u94FE\u961F\u5217" aria-hidden="true">#</a></h3><ul><li>\u5934\u6307\u9488\uFF08front\uFF09\u6307\u5411\u961F\u5934\u7ED3\u70B9\u3002</li><li>\u5C3E\u6307\u9488\uFF08rear\uFF09\u6307\u5411\u961F\u5C3E\u7ED3\u70B9\u3002</li><li>\u6CE8\u610F\u662F<strong>\u5220\u5934\u52A0\u5C3E</strong>\uFF0C\u56E0\u4E3A\u5220\u9664\u94FE\u8868\u7684\u4E00\u4E2A\u7ED3\u70B9\u9700\u8981\u77E5\u9053\u5B83\u7684\u524D\u8D8B\u7ED3\u70B9\u3002</li></ul><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20220120160327650.png" alt="image-20220120160327650" style="zoom:67%;"><ul><li>\u94FE\u4E3A\u7A7A\u7684\u6761\u4EF6\u662Ffront == rear, \u539F\u5219\u4E0A\u6765\u8BF4\u94FE\u961F\u5217\u662F\u4E0D\u9700\u8981\u5224\u6EE1\u7684\u3002</li></ul><p>\u521D\u59CB\u5316\uFF1A</p><div class="language-cpp line-numbers-mode"><pre><code>linkquene <span class="token operator">*</span><span class="token function">initquene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    linkquene <span class="token operator">*</span>q<span class="token punctuation">;</span><span class="token comment">//\u94FE\u961F\u5217\u6307\u9488\uFF0C\u5C01\u88C5\u4E86\u961F\u5934\u961F\u5C3E\u6307\u9488</span>
    QUENE <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token comment">//p\u4E3A\u6307\u5411\u94FE\u961F\u5217\u7ED3\u70B9\u7684\u6307\u9488</span>
    q <span class="token operator">=</span> <span class="token keyword">new</span> linkquene<span class="token punctuation">;</span>
    p <span class="token operator">=</span> <span class="token keyword">new</span> QUENE<span class="token punctuation">;</span><span class="token comment">//\u751F\u6210\u5934\u7ED3\u70B9</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment">//\u5934\u8282\u70B9\u6307\u9488\u57DF\u4E3A\u7A7A\uFF0C\u7A7A\u961F\u5217</span>
    q<span class="token operator">-&gt;</span>front <span class="token operator">=</span> q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">//\u961F\u5934\u961F\u5C3E\u6307\u9488\u90FD\u6307\u5411\u5934\u7ED3\u70B9</span>
    <span class="token keyword">return</span> q<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>\u5165\u961F\uFF1A</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">void</span> <span class="token function">enquene</span><span class="token punctuation">(</span>linkquene <span class="token operator">*</span>q<span class="token punctuation">,</span> datatype x<span class="token punctuation">)</span><span class="token punctuation">{</span>
    QUENE <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">//p\u4E3A\u6307\u5411\u94FE\u961F\u5217\u7ED3\u70B9\u7684\u6307\u9488</span>
    p <span class="token operator">=</span> <span class="token keyword">new</span> QUENE<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>data <span class="token operator">=</span> x<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    q<span class="token operator">-&gt;</span>rear<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
    q<span class="token operator">-&gt;</span>rear<span class="token operator">=</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u51FA\u961F\uFF1A</p><div class="language-cpp line-numbers-mode"><pre><code>datatype <span class="token function">dequene</span><span class="token punctuation">(</span>linkquene <span class="token operator">*</span>q<span class="token punctuation">)</span><span class="token punctuation">{</span>
    QUENE <span class="token operator">*</span>p<span class="token punctuation">;</span> <span class="token comment">//p\u4E3A\u6307\u5411\u94FE\u961F\u5217\u7ED3\u70B9\u7684\u6307\u9488</span>
    datattype x<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token operator">-&gt;</span>front <span class="token operator">==</span> q<span class="token operator">-&gt;</span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        p <span class="token operator">=</span> q<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//p\u6307\u5411\u961F\u5217\u5934</span>
        x <span class="token operator">=</span> p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span><span class="token comment">//\u5C06\u961F\u5934\u5143\u7D20\u7684\u503C\u8D4B\u7ED9x</span>
        q<span class="token operator">-&gt;</span>front<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//\u51FA\u961F</span>
        <span class="token comment">//\u82E5\u51FA\u961F\u5217\u540E\u961F\u5217\u4E3A\u7A7A\uFF0C\u5219\u4FEE\u6539\u961F\u5C3E\u6307\u9488</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">==</span> null<span class="token punctuation">)</span>
            q<span class="token operator">-&gt;</span>rear <span class="token operator">=</span> q<span class="token operator">-&gt;</span>front<span class="token punctuation">;</span>
        <span class="token keyword">delete</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="\u961F\u5217\u7684\u5E94\u7528\uFF08\u5B50\u96C6\u5212\u5206\u95EE\u9898\uFF09" tabindex="-1">\u961F\u5217\u7684\u5E94\u7528\uFF08\u5B50\u96C6\u5212\u5206\u95EE\u9898\uFF09 <a class="header-anchor" href="#\u961F\u5217\u7684\u5E94\u7528\uFF08\u5B50\u96C6\u5212\u5206\u95EE\u9898\uFF09" aria-hidden="true">#</a></h3><blockquote><p><em>\u8FD0\u52A8\u4F1A\u8BBE\u7ACB\u4E86n\u4E2A\u6BD4\u8D5B\u9879\u76EE\uFF0C\u6CA1\u997F\u8FC7\u8FD0\u52A8\u5458\u53EF\u4EE5\u53C2\u52A01~3\u4E2A\u9879\u76EE\u3002\u8BF7\u95EE\u5E94\u8BE5\u5982\u4F55\u5B89\u6392\u6BD4\u8D5B\u65E5\u7A0B\uFF1F\u4ECE\u800C\u4F7F\u540C\u4E00\u8FD0\u52A8\u5458\u53C2\u52A0\u7684\u9879\u76EE\u4E0D\u80FD\u5728\u540C\u4E00\u65F6\u95F4\u8FDB\u884C\uFF0C\u5E76\u4F7F\u603B\u7684\u7ADE\u8D5B\u65E5\u7A0B\u6700\u77ED\u3002</em></p></blockquote><p><strong>\u89E3\u51B3\u65B9\u6CD5\u6982\u8FF0\uFF1A</strong></p><p>\u5C06\u96C6\u5408A\u4E2D\u7684\u6240\u6709\u5143\u7D20\u653E\u5165\u4E00\u4E2A\u961F\u5217\u4E2D\uFF0C\u7136\u540E\u4F9D\u6B21\u53D6\u51FA\u961F\u5934\u5143\u7D20a_i\u653E\u5165\u4E00\u4E2A\u5F85\u5206\u914D\u7684\u7EC4gm\u4E2D\uFF0C\u82E5a_i\u4E0E\u7EC4gm\u4E2D\u7684\u5176\u4ED6\u5143\u7D20\u65E0\u51B2\u7A81\uFF0C\u5219\u52A0\u5165\u7EC4gm\uFF0C\u5982\u4EA7\u751F\u51B2\u7A81\uFF0C\u5219\u5C06\u91CD\u65B0\u5165\u961F\uFF1B<strong>\u5F53\u904D\u5386\u8003\u5BDF\u4E00\u8F6E\u961F\u5217\u4E2D\u7684\u6240\u6709\u5143\u7D20\u540E\uFF0C\u4EA7\u751F\u4E00\u4E2A\u65E0\u51B2\u7A81\u7684\u5B50\u96C6gm\uFF0C\u5982\u6B64\u5FAA\u73AF</strong>\uFF0C\u76F4\u5230\u6240\u6709\u5143\u7D20\u90FD\u88AB\u5206\u914D\u5B8C\u6210\u3002</p><p>\u7EC6\u8282\uFF1A</p><ul><li>\u540C\u6837\u4F7F\u7528\u5173\u7CFB\u77E9\u9635\u5B58\u653E\u51B2\u7A81\u5173\u7CFB</li><li>\u4F7F\u7528**newrela[]**\u5B58\u653E\u4E0E\u5F53\u524D\u5B50\u96C6\u7684\u5143\u7D20\u51B2\u7A81\u7684\u5173\u7CFB\u5143\u7D20==&gt;\u5B58\u4E00\u4E2A\u5143\u7D20\u5230\u8BE5\u5B50\u96C6\u5C31\u5C06\u8BE5\u5143\u7D20\u6240\u6709\u6709\u51B2\u7A81\u5173\u7CFB\u7684\u5143\u7D20\u5728newrela[]\u4E2D\u6807\u4E3A1\uFF0C\u5982\u6B64\u7D2F\u79EF\uFF0C\u76F4\u5230\u8FD9\u6B21\u5FAA\u73AF\u7ED3\u675F\uFF0Cnewrela[]\u6E05\u7A7A\u3002</li></ul><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20220120160345944.png" alt="image-20220120160345944" style="zoom:80%;"><ul><li>\u662F\u5C06A\u4E2D\u5143\u7D20\u7684\u7F16\u53F7\uFF081\uFF0C2\uFF0C3\xB7\xB7\xB7\xB7\xB7\xB7\uFF0Cn\uFF09\u5165\u961F\u5230cq\u4E2D\uFF0Creault[]\uFF0Cnewrela[]\u6E05\u7A7A\uFF0C\u7EC4\u53F7group=1\uFF0Cpre=1\u3002</li><li>\u51FA\u961F\u4E00\u4E2A\u5143\u7D20-&gt;i\uFF0Cpre = i\uFF0Cresult[i] = group,\u5224\u65AD\u51B2\u7A81\u3002</li><li>\u5982\u679Ci&lt;pre\uFF0C\u5219\u7B2C\u4E00\u4E2A\u5206\u7EC4\u5B8C\u6210\uFF0C\u5F00\u59CBgroup=2\u3002</li></ul><p>\u51C6\u5907</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdexcept&gt;</span></span>

<span class="token comment">//\u5173\u7CFB\u77E9\u9635\uFF0C\u4E0D\u8FC7\u8FD9\u91CC\u662F\u4EBA\u5DE5\u624B\u52A8\u5EFA\u7684\uFF0C\u5176\u4E2D\u7B2C\u4E00\u6392\u4E0E\u7B2C\u4E00\u5217\u4E0D\u53C2\u4E0E</span>
<span class="token keyword">int</span> matrix<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//0</span>
    <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//1</span>
    <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//2</span>
    <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//3</span>
    <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//4</span>
    <span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//5</span>
    <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//6</span>
    <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//7</span>
    <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//8</span>
    <span class="token punctuation">{</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment">//9</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> newrela<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>\u987A\u5E8F\u5B58\u50A8\u5B9E\u73B0\u961F\u5217</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">class</span> <span class="token class-name">my_quene</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">my_quene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">my_quene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">enquene</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span> <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>front<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span> <span class="token string">&quot;duiman~&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>rear <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rear<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>nums<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">dequene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>front <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span> <span class="token string">&quot;duikong~&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>front <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>front<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nums<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>front <span class="token operator">==</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>rear<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u4E3A\u8BE5\u9898\u5355\u72EC\u5C01\u88C5\u7684\u4E00\u4E2A\u65B9\u6CD5</span>
    <span class="token comment">//\u5224\u65AD\u4E00\u6B21\u662F\u5426\u904D\u5386\u5B8C\u4E86</span>
    <span class="token keyword">int</span> <span class="token function">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//\u8FD9\u91CC\u540E\u9762\u8FD8\u8981\u51FA\u961F\u5165\u961F\u624D\u7B97\u7ED3\u675F</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>nums<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>nums<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>rear<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>\u94FE\u5F0F\u5B58\u50A8\u5B9E\u73B0\u961F\u5217</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">struct</span> <span class="token class-name">qnode</span>
<span class="token punctuation">{</span>
    <span class="token keyword">int</span> key<span class="token punctuation">;</span>
    qnode<span class="token operator">*</span> next<span class="token punctuation">;</span>
    <span class="token function">qnode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span>
		<span class="token function">key</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">my_quene</span><span class="token punctuation">{</span>
    qnode<span class="token operator">*</span> front <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token comment">//front\u76F8\u5F53\u4E8E\u5934\u8282\u70B9</span>
    qnode<span class="token operator">*</span> rear <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">my_quene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        front <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">qnode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        rear <span class="token operator">=</span> front<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">my_quene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">delete</span><span class="token punctuation">(</span>front<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">enquene</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>
        qnode<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">qnode</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        rear<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>
        rear <span class="token operator">=</span> rear<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">dequene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span><span class="token string">&quot;quene_empty!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        qnode<span class="token operator">*</span> temp <span class="token operator">=</span> front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token comment">//\u8FD9\u91CC\u6700\u540E\u4E00\u4E2A\u8282\u70B9\u5220\u9664\u7684\u65F6\u5019\u9700\u8981\u624B\u52A8\u79FB\u52A8rear\u6307\u9488\uFF1B</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            rear <span class="token operator">=</span> front<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        front<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> temp<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
        <span class="token keyword">delete</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>rear <span class="token operator">==</span> front<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>front<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>front<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>key <span class="token operator">&lt;</span> rear<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><p>\u6D4B\u8BD5</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">void</span> <span class="token function">test_my_quene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    my_quene test<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        test<span class="token punctuation">.</span><span class="token function">enquene</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">int</span> temp <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">dequene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> temp <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>\u6DFB\u52A0\u51B2\u7A81</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">int</span> <span class="token function">add_rela</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u5982\u679C\u548C\u5F53\u524D\u7EC4\u51B2\u7A81\uFF0C\u5C31\u8FD4\u56DE0</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>newrela<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u4E0D\u51B2\u7A81\u5C31\u589E\u52A0\u5F53\u524D\u4F1A\u51B2\u7A81\u7684\uFF0C\u8FD4\u56DE1</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            newrela<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>\u4E3B\u51FD\u6570</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//test_my_quene();</span>

    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> groups<span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> group<span class="token punctuation">;</span>

    <span class="token comment">//init_quene</span>
    my_quene match<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        match<span class="token punctuation">.</span><span class="token function">enquene</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> flag_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>match<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span><span class="token function">over</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u6807\u5FD7\u7740\u4E00\u8F6E\u7ED3\u675F\u4E86\uFF0C\u4E0B\u4E00\u6B65\u5C31\u662F\u8FD9\u4E2A</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u8BF4\u660E\u662F\u5F00\u59CB\u5C31\u4E0D\u8DF3\u51FA</span>
                    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//\u4E0B\u4E00\u6B21\u662F\u7ED3\u675F</span>
                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>flag_1<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//\u4E0B\u4E00\u6B21\u662F\u5F00\u59CB</span>
                    flag_1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            temp <span class="token operator">=</span> match<span class="token punctuation">.</span><span class="token function">dequene</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">add_rela</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                group<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                match<span class="token punctuation">.</span><span class="token function">enquene</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                flag_1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token comment">//\u6E05\u7A7A\u5173\u7CFB</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            newrela<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>match<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        groups<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>
        group<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//\u5C55\u793A</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> groups<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;{&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> groups<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> groups<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;}, &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div>`,47);function d(y,g,h,w,f,q){const p=e("Comment");return l(),o("div",null,[r,k,i,b,m,c(p)])}var _=t(u,[["render",d]]);export{x as __pageData,_ as default};
