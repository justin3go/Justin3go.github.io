import{_ as s,r as a,c as p,a as t,b as e,o}from"./app.00a9a80e.js";const h='{"title":"\u7EBF\u6027\u8868","description":"","frontmatter":{"published":true,"date":"2022-1-22","tags":"\u7B97\u6CD5\u4E0E\u6570\u636E\u7ED3\u6784"},"headers":[{"level":2,"title":"\u7EBF\u6027\u8868\u7684\u57FA\u7840\u6982\u5FF5","slug":"\u7EBF\u6027\u8868\u7684\u57FA\u7840\u6982\u5FF5"},{"level":3,"title":"\u5B9A\u4E49","slug":"\u5B9A\u4E49"},{"level":3,"title":"\u57FA\u672C\u7279\u6027","slug":"\u57FA\u672C\u7279\u6027"},{"level":3,"title":"\u5E38\u89C1\u8FD0\u7B97","slug":"\u5E38\u89C1\u8FD0\u7B97"},{"level":3,"title":"ADT","slug":"adt"},{"level":2,"title":"\u987A\u5E8F\u5B58\u50A8\u53CA\u8FD0\u7B97","slug":"\u987A\u5E8F\u5B58\u50A8\u53CA\u8FD0\u7B97"},{"level":3,"title":"\u5B9A\u4E49","slug":"\u5B9A\u4E49-1"},{"level":3,"title":"\u7279\u70B9","slug":"\u7279\u70B9"},{"level":3,"title":"\u57FA\u7840\u64CD\u4F5C","slug":"\u57FA\u7840\u64CD\u4F5C"},{"level":2,"title":"\u94FE\u5F0F\u5B58\u50A8\u53CA\u8FD0\u7B97","slug":"\u94FE\u5F0F\u5B58\u50A8\u53CA\u8FD0\u7B97"},{"level":3,"title":"\u57FA\u7840\u6982\u5FF5","slug":"\u57FA\u7840\u6982\u5FF5-1"},{"level":3,"title":"\u57FA\u7840\u64CD\u4F5C","slug":"\u57FA\u7840\u64CD\u4F5C-1"},{"level":3,"title":"\u5FAA\u73AF\u94FE\u8868","slug":"\u5FAA\u73AF\u94FE\u8868"},{"level":3,"title":"\u53CC\u5411\u94FE\u8868","slug":"\u53CC\u5411\u94FE\u8868"},{"level":2,"title":"\u603B\u7ED3\u5BF9\u6BD4","slug":"\u603B\u7ED3\u5BF9\u6BD4"},{"level":2,"title":"\u57FA\u7840\u7ECF\u5178\u9898\u578B","slug":"\u57FA\u7840\u7ECF\u5178\u9898\u578B"}],"relativePath":"\u6C47\u603B\u5206\u7C7B/\u7B97\u6CD5\u4E0E\u6570\u636E\u7ED3\u6784/02\u7EBF\u6027\u8868.md","lastUpdated":1642848188314}',c={},l=e(`<h1 id="\u7EBF\u6027\u8868" tabindex="-1">\u7EBF\u6027\u8868 <a class="header-anchor" href="#\u7EBF\u6027\u8868" aria-hidden="true">#</a></h1><blockquote><p>\u672C\u7AE0\u5C06\u8BE6\u7EC6\u5730\u4ECB\u7ECD\u7EBF\u6027\u8868\uFF0C\u5305\u542B\u7EBF\u6027\u5B58\u50A8\u548C\u94FE\u5F0F\u5B58\u50A8\uFF0C\u540C\u65F6\u4ECB\u7ECD\u4E86\u62BD\u8C61\u6570\u636E\u7C7B\u578B(ADT)\uFF0C\u5E76\u4E14\u4F7F\u7528cpp\u4EE3\u7801\u7ED3\u5408\u7406\u8BBA\u8FDB\u884C\u8BB2\u89E3\uFF0C\u6700\u540E\u4E5F\u9644\u4E0A\u4E86\u4E00\u4E9B\u7EBF\u6027\u8868\u76F8\u5173\u7684\u7ECF\u5178\u9898\u578B\u4EE5\u4FBF\u8BFB\u8005\u80FD\u7406\u89E3\u7EBF\u6027\u8868\u7684\u4F5C\u7528\u4EE5\u53CA\u80FD\u8FD0\u7528\u7EBF\u6027\u8868\u3002</p><p>\u53EF\u4EE5\u8F6C\u8F7D\uFF0C\u4F46\u8BF7\u58F0\u660E\u6E90\u94FE\u63A5\uFF1A\u6587\u7AE0\u6E90\u94FE\u63A5<a href="https://justin3go.com" target="_blank" rel="noopener noreferrer">justin3go.com</a>(\u6709\u4E9Blatex\u516C\u5F0F\u67D0\u4E9B\u5E73\u53F0\u4E0D\u80FD\u6E32\u67D3\u53EF\u67E5\u770B\u8FD9\u4E2A\u7F51\u7AD9)</p></blockquote><h2 id="\u7EBF\u6027\u8868\u7684\u57FA\u7840\u6982\u5FF5" tabindex="-1">\u7EBF\u6027\u8868\u7684\u57FA\u7840\u6982\u5FF5 <a class="header-anchor" href="#\u7EBF\u6027\u8868\u7684\u57FA\u7840\u6982\u5FF5" aria-hidden="true">#</a></h2><h3 id="\u5B9A\u4E49" tabindex="-1">\u5B9A\u4E49 <a class="header-anchor" href="#\u5B9A\u4E49" aria-hidden="true">#</a></h3><p>n(<strong>n &gt;= 0</strong>)\u4E2A\u5177\u6709<strong>\u76F8\u540C\u7279\u6027</strong>\u6570\u636E\u5143\u7D20\u7684<strong>\u6709\u9650\u5E8F\u5217</strong></p><h3 id="\u57FA\u672C\u7279\u6027" tabindex="-1">\u57FA\u672C\u7279\u6027 <a class="header-anchor" href="#\u57FA\u672C\u7279\u6027" aria-hidden="true">#</a></h3><ul><li>\u6709\u4E14\u4EC5\u6709\u4E00\u4E2A\u7B2C\u4E00\u4E2A\u5143\u7D20\uFF0C\u6709\u4E14\u4EC5\u6709\u4E00\u4E2A\u6700\u540E\u5143\u7D20\u3002</li><li>\u51FA\u7B2C\u4E00\u5143\u7D20\u5916\uFF0C\u5176\u4ED6\u5143\u7D20\u90FD\u6709\u552F\u4E00\u7684<strong>\u76F4\u63A5\u524D\u8D8B</strong>\u3002</li><li>\u9664\u6700\u540E\u5143\u7D20\u5916\uFF0C\u5176\u4ED6\u5143\u7D20\u90FD\u6709\u552F\u4E00\u7684<strong>\u76F4\u63A5\u540E\u7EE7</strong>\u3002</li></ul><h3 id="\u5E38\u89C1\u8FD0\u7B97" tabindex="-1">\u5E38\u89C1\u8FD0\u7B97 <a class="header-anchor" href="#\u5E38\u89C1\u8FD0\u7B97" aria-hidden="true">#</a></h3><ul><li>\u521D\u59CB\u5316\u7EBF\u6027\u8868</li><li>\u8868\u7F6E\u7A7A</li><li>\u6C42\u7EBF\u6027\u8868\u4E2D\u7B2Ci\u4E2A\u5143\u7D20</li><li>\u67E5\u627E\u6EE1\u8DB3\u6761\u4EF6\u7684\u6570\u636E\u5143\u7D20</li><li>\u63D2\u5165</li><li>\u5220\u9664</li><li>\u67E5\u627E\u67D0\u4E2A\u5143\u7D20\u524D\u8D8B/\u540E\u7EE7</li><li>\u6392\u5E8F</li></ul><h3 id="adt" tabindex="-1">ADT <a class="header-anchor" href="#adt" aria-hidden="true">#</a></h3><h5 id="\u57FA\u7840\u6982\u5FF5" tabindex="-1">\u57FA\u7840\u6982\u5FF5 <a class="header-anchor" href="#\u57FA\u7840\u6982\u5FF5" aria-hidden="true">#</a></h5><ul><li><p>\u662F\u4E00\u79CD\u62BD\u8C61\u6570\u636E\u7C7B\u578B\uFF0C\u5305\u542B</p><ul><li>\u5BF9\u6570\u636E\u7684\u5B9A\u4E49</li><li>\u5BF9\u5173\u7CFB\u7684\u5B9A\u4E49</li><li>\u5BF9\u8FD0\u7B97\u7684\u5B9A\u4E49</li></ul></li><li><p>\u2018{D, S, P}\u2019</p><ul><li>D\uFF1A\u6570\u636E\u96C6\u5408</li><li>S\uFF1A\u5173\u7CFB\u96C6\u5408</li><li>P\uFF1A\u64CD\u4F5C\u7684\u96C6\u5408</li></ul></li><li><p>\u901A\u8FC7\u56FA\u6709\u6570\u636E\u7C7B\u578B\u5B9E\u73B0</p></li></ul><h5 id="\u7EBF\u6027\u8868\u7684\u4F8B\u5B50" tabindex="-1">\u7EBF\u6027\u8868\u7684\u4F8B\u5B50 <a class="header-anchor" href="#\u7EBF\u6027\u8868\u7684\u4F8B\u5B50" aria-hidden="true">#</a></h5><table><thead><tr><th>ADT</th><th>triplet</th></tr></thead><tbody><tr><td><strong>\u6570\u636E\u5BF9\u8C61</strong></td><td>D = \u2018{v1, v2, v3}\u2019</td></tr><tr><td><strong>\u6570\u636E\u5173\u7CFB</strong></td><td>R = \u2018{&lt;v1, v2&gt;, &lt;v2, v3&gt;}\u2019</td></tr><tr><td><strong>\u57FA\u672C\u64CD\u4F5C</strong></td><td></td></tr><tr><td>init_triplet(&amp;T, n1, n2, n3)</td><td>\u7ED3\u679C\uFF1A\u6784\u9020\u4E09\u5143\u7EC4T\uFF0C\u5BF9\u5143\u7D20v1,v2,v3\u5206\u522B\u8D4B\u4EE5n1,n2,n3\u7684\u503C</td></tr><tr><td>max(T, &amp;e)</td><td>\u6761\u4EF6\uFF1A\u5B58\u5728\uFF1B\u7ED3\u679C\uFF1A\u627E\u5230T\u4E2D\u6570\u636E\u5143\u7D20\u7684\u6700\u5927\u503C\uFF0C\u7528e\u8FD4\u56DE\\</td></tr></tbody></table><h2 id="\u987A\u5E8F\u5B58\u50A8\u53CA\u8FD0\u7B97" tabindex="-1">\u987A\u5E8F\u5B58\u50A8\u53CA\u8FD0\u7B97 <a class="header-anchor" href="#\u987A\u5E8F\u5B58\u50A8\u53CA\u8FD0\u7B97" aria-hidden="true">#</a></h2><h3 id="\u5B9A\u4E49-1" tabindex="-1">\u5B9A\u4E49 <a class="header-anchor" href="#\u5B9A\u4E49-1" aria-hidden="true">#</a></h3><p>\u5728\u5185\u5B58\u4E2D\u5F00\u8F9F\u8FDE\u7EED\u7684\u5B58\u50A8\u7A7A\u95F4\uFF0C\u7528\u8FDE\u7EED\u7684\u5B58\u50A8\u5355\u5143\u4F9D\u6B21\u5B58\u653E\u7EBF\u6027\u8868\u7684\u5143\u7D20\u3002</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAXSIZE</span> <span class="token expression">maxlen</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> ele<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    ele v<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>sqlist<span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="\u7279\u70B9" tabindex="-1">\u7279\u70B9 <a class="header-anchor" href="#\u7279\u70B9" aria-hidden="true">#</a></h3><ul><li>\u903B\u8F91\u4E0A\u76F8\u90BB\u7684\u6570\u636E\u5143\u7D20\uFF0C\u5176\u7269\u7406\u4F4D\u7F6E\u4E5F\u76F8\u90BB\u3002</li><li>\u5229\u7528\u7269\u7406\u4F4D\u7F6E\u4E0A\u7684\u5173\u7CFB\uFF0C<strong>\u53CD\u6620</strong>\u5143\u7D20\u7684\u903B\u8F91\u5173\u7CFB\u3002</li><li>\u6269\u5C55\u4E0D\u7075\u6D3B\uFF0C\u5BB9\u6613\u9020\u6210\u7A7A\u95F4\u6D6A\u8D39\u3002</li><li>\u987A\u5E8F\u8868\u662F\u4E00\u79CD<strong>\u968F\u673A\u5B58\u53D6</strong>\u7684\u5B58\u50A8\u7ED3\u6784\u3002</li><li>\u9759\u6001\u64CD\u4F5C\u5BB9\u6613\u5B9E\u73B0\u3002</li><li>\u52A8\u6001\u64CD\u4F5C\u5B9E\u73B0\u6548\u7387\u4F4E\u3002</li></ul><h3 id="\u57FA\u7840\u64CD\u4F5C" tabindex="-1">\u57FA\u7840\u64CD\u4F5C <a class="header-anchor" href="#\u57FA\u7840\u64CD\u4F5C" aria-hidden="true">#</a></h3><ul><li>\u521D\u59CB\u5316\uFF0C\u6784\u5EFA\u7A7A\u987A\u5E8F\u8868\u3002</li><li>\u6C42\u8868\u957F</li><li><strong>\u67E5\u627E</strong>\uFF1A\u67E5\u627E\u6210\u529F\u65F6\u7684ASL = (n+1)/2</li><li><strong>\u63D2\u5165</strong><ul><li>\u5C06\u4ECE\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u5230\u4F4D\u7F6Ei\u7684\u6BCF\u4E2A\u5143\u7D20\u4F9D\u6B21\u5411\u540E\u79FB\u52A8*<u>\uFF08\u4E3B\u8981\u65F6\u95F4\u6D88\u8017\uFF09</u>*\u4E00\u4E2A\u4F4D\u7F6E\u3002</li><li>\u5C06x\u5199\u5230\u7B2Ci\u4E2A\u4F4D\u7F6E\u4E0A\u3002</li><li>ASL = n/2</li></ul></li><li><strong>\u5220\u9664</strong>\uFF1A\u5B9E\u9645\u64CD\u4F5C\u4E3A\u4F9D\u6B21\u5411\u524D\u8D4B\u503C\uFF0CASL = (n-1)/2</li></ul><p>\u5220\u9664\u91CD\u590D\u5143\u7D20</p><blockquote><p><em>\u5DF2\u77E5\u987A\u5E8F\u8868\u7684\u5143\u7D20\u6309\u975E\u964D\u5E8F\u6392\u5217\u3002\u8BF7\u7F16\u5199\u7B97\u6CD5\uFF0C\u5220\u9664\u8868\u4E2D\u7684\u91CD\u590D\u5143\u7D20\u3002\u4F8B\u5982\uFF0C\u539F\u8868\u4E3A\uFF081\uFF0C1\uFF0C2\uFF0C3\uFF0C3\uFF0C3\uFF0C4\uFF0C5\uFF0C5\uFF09\uFF0C\u7ECF\u7B97\u6CD5\u5904\u7406\u540E\uFF0C\u8868\u4E3A\uFF081\uFF0C2\uFF0C3\uFF0C4\uFF0C5\uFF09\u3002\u8981\u6C42\u7B97\u6CD5\u7684\u7A7A\u95F4\u590D\u6742\u5EA6\u4E3AO(1)\uFF0C\u4E0D\u9700\u8F93\u51FA\u8868\u5143\u7D20\u7684\u503C\u3002</em></p></blockquote><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token keyword">const</span> MAXLEN <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">t</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> data<span class="token punctuation">[</span>MAXLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>LIST<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>LIST<span class="token operator">*</span> list<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> list<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">,</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        list<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    list<span class="token operator">-&gt;</span>len<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">PackList</span><span class="token punctuation">(</span>LIST<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> list<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> list<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">del</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>
                j<span class="token operator">--</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print_list</span><span class="token punctuation">(</span>LIST<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> list<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;]&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    LIST list <span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">PackList</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">/*\u8F93\u51FA\uFF1A
[1, 1, 2, 3, 3, 3, 4, 5, 5, ]
[1, 2, 3, 4, 5, ]
*/</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><h2 id="\u94FE\u5F0F\u5B58\u50A8\u53CA\u8FD0\u7B97" tabindex="-1">\u94FE\u5F0F\u5B58\u50A8\u53CA\u8FD0\u7B97 <a class="header-anchor" href="#\u94FE\u5F0F\u5B58\u50A8\u53CA\u8FD0\u7B97" aria-hidden="true">#</a></h2><h3 id="\u57FA\u7840\u6982\u5FF5-1" tabindex="-1">\u57FA\u7840\u6982\u5FF5 <a class="header-anchor" href="#\u57FA\u7840\u6982\u5FF5-1" aria-hidden="true">#</a></h3><ul><li><p><strong>\u57FA\u672C\u7279\u6027</strong>\uFF1A\u7528\u4E00\u7EC4\u7269\u7406\u4F4D\u7F6E<strong>\u4EFB\u610F</strong>\u7684\u5B58\u50A8\u5355\u5143\u5B58\u50A8\u7EBF\u6027\u8868\u7684\u7ED3\u70B9\uFF0C\u7269\u7406\u4F4D\u7F6E\u7684\u5173\u7CFB\u4E0D\u80FD\u53CD\u6620\u7ED3\u70B9\u95F4\u7684\u903B\u8F91\u5173\u7CFB\u3002</p></li><li><p><strong>\u7ED3\u6784</strong>\uFF1A\u6570\u636E\u57DF=&gt;\u5B58\u50A8\u5143\u7D20\u672C\u8EAB\u7684\u4FE1\u606F\uFF1B\u6307\u9488\u57DF=&gt;\u7ED3\u70B9\u7684\u76F4\u63A5\u540E\u7EE7\u7ED3\u70B9\u7684\u5185\u5B58\u5730\u5740\u3002</p></li></ul><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">char</span> ele<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{</span>
    ele data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">node</span> <span class="token operator">*</span>node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li><strong>\u5934\u7ED3\u70B9</strong>\uFF1A\u8F85\u52A9\u7ED3\u70B9\uFF0C\u540E\u9762\u505A\u589E\u5220\u6539\u67E5\u7684\u65F6\u5019\u5934\u8282\u70B9\u662F\u4E0D\u53D8\u7684\uFF0C\u51FD\u6570\u4E5F\u53EF\u4EE5\u4E0D\u9700\u8981\u8FD4\u56DE\u503C\u5C31\u884C\u3002</li></ul><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20210607100105812.png" alt="image-20210607100105812" style="zoom:50%;"><p><em>\u6CE8\uFF1A\u521B\u5EFA\u7ED3\u70B9\u65F6\u9700\u8981\u5F00\u8F9F\u5185\u5B58\uFF0C\u5220\u9664\u7ED3\u70B9\u65F6\u8BB0\u5F97<strong>\u91CA\u653E\u7A7A\u95F4</strong>\u3002</em></p><h3 id="\u57FA\u7840\u64CD\u4F5C-1" tabindex="-1">\u57FA\u7840\u64CD\u4F5C <a class="header-anchor" href="#\u57FA\u7840\u64CD\u4F5C-1" aria-hidden="true">#</a></h3><h5 id="\u5B9A\u4E49\u7ED3\u6784" tabindex="-1">\u5B9A\u4E49\u7ED3\u6784 <a class="header-anchor" href="#\u5B9A\u4E49\u7ED3\u6784" aria-hidden="true">#</a></h5><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;exception&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdexcept&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
	<span class="token keyword">int</span> key<span class="token punctuation">;</span>
	<span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
	<span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span>
			<span class="token function">key</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h5 id="\u521B\u5EFA\u5E26\u5934\u7ED3\u70B9\u7684\u5355\u94FE\u8868-\u5C3E\u63D2\u4E0E\u5934\u63D2" tabindex="-1">\u521B\u5EFA\u5E26\u5934\u7ED3\u70B9\u7684\u5355\u94FE\u8868(\u5C3E\u63D2\u4E0E\u5934\u63D2) <a class="header-anchor" href="#\u521B\u5EFA\u5E26\u5934\u7ED3\u70B9\u7684\u5355\u94FE\u8868-\u5C3E\u63D2\u4E0E\u5934\u63D2" aria-hidden="true">#</a></h5><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">void</span> <span class="token function">init_list</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">bool</span> head_or_tail <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    ListNode<span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head_or_tail <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span> 
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        ListNode<span class="token operator">*</span> tail <span class="token operator">=</span> head<span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>
            tail <span class="token operator">=</span> tail<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h5 id="\u53D6\u8868\u4E2D\u7B2Ci\u4E2A\u5143\u7D20\u7684\u952E\u503C" tabindex="-1">\u53D6\u8868\u4E2D\u7B2Ci\u4E2A\u5143\u7D20\u7684\u952E\u503C <a class="header-anchor" href="#\u53D6\u8868\u4E2D\u7B2Ci\u4E2A\u5143\u7D20\u7684\u952E\u503C" aria-hidden="true">#</a></h5><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">int</span> <span class="token function">get_value</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u9996\u5143\u8282\u70B9\u4E3A\u7B2C\u4E00\u4E2A\u8282\u70B9\uFF0C\u5373index\u4ECE1\u5F00\u59CB</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span> <span class="token string">&quot;negative number!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    ListNode<span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> index <span class="token operator">&amp;&amp;</span> p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span><span class="token string">&quot;index out of the range!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token operator">-&gt;</span>key<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h5 id="\u5220\u9664\u8868\u4E2D\u7684\u67D0\u4E2A\u7ED3\u70B9" tabindex="-1">\u5220\u9664\u8868\u4E2D\u7684\u67D0\u4E2A\u7ED3\u70B9 <a class="header-anchor" href="#\u5220\u9664\u8868\u4E2D\u7684\u67D0\u4E2A\u7ED3\u70B9" aria-hidden="true">#</a></h5><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">void</span> <span class="token function">del_node</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u9996\u5143\u8282\u70B9\u4E3A\u7B2C\u4E00\u4E2A\u8282\u70B9\uFF0C\u5373index\u4ECE1\u5F00\u59CB</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span> <span class="token string">&quot;negative number!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    ListNode<span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    ListNode<span class="token operator">*</span> pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u4F7Fp\u6307\u5411\u8981\u5220\u9664\u7684\u8282\u70B9</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        pre <span class="token operator">=</span> p<span class="token punctuation">;</span>
        p <span class="token operator">=</span> p <span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span> <span class="token string">&quot;index out of the range!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    pre<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//del</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h5 id="\u5411\u8868\u4E2D\u63D2\u5165\u67D0\u4E2A\u7ED3\u70B9" tabindex="-1">\u5411\u8868\u4E2D\u63D2\u5165\u67D0\u4E2A\u7ED3\u70B9 <a class="header-anchor" href="#\u5411\u8868\u4E2D\u63D2\u5165\u67D0\u4E2A\u7ED3\u70B9" aria-hidden="true">#</a></h5><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//0\u4EE3\u8868\u7684\u5C31\u662F\u4ECE\u5934\u90E8\u6DFB\u52A0\uFF0C1\u4EE3\u8868\u7684\u5C31\u662F\u5728\u9996\u5143\u8282\u70B9\u540E\u6DFB\u52A0\uFF1B</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span> <span class="token string">&quot;negative number!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ListNode<span class="token operator">*</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ListNode<span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment">//\u5BFB\u627E\u8981\u6DFB\u52A0\u7684\u4F4D\u7F6E\u7684\u524D\u4E00\u4E2A\u8282\u70B9</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> pos<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span> <span class="token string">&quot;index out of the range!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    t<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h5 id="\u641C\u7D22\u7ED3\u70B9" tabindex="-1">\u641C\u7D22\u7ED3\u70B9 <a class="header-anchor" href="#\u641C\u7D22\u7ED3\u70B9" aria-hidden="true">#</a></h5><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">int</span> <span class="token function">search</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//-1\u4EE3\u8868\u6CA1\u627E\u5230\uFF0C\u627E\u5230\u8FD4\u56DE\u5BF9\u5E94\u7684\u7B2C\u4E00\u6B21\u4E0B\u6807</span>
    ListNode<span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span> p<span class="token operator">-&gt;</span> next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>key <span class="token operator">==</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u5C3E\u8282\u70B9\u8FD8\u6CA1\u5224\u65AD</span>
        <span class="token keyword">return</span> i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h5 id="\u4E3B\u51FD\u6570" tabindex="-1">\u4E3B\u51FD\u6570 <a class="header-anchor" href="#\u4E3B\u51FD\u6570" aria-hidden="true">#</a></h5><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u5934\u63D2\u6CD5</span>
    ListNode<span class="token operator">*</span> head1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_list</span><span class="token punctuation">(</span>head1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span>head1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[3, 2, 1, 0]</span>
    <span class="token comment">//\u5C3E\u63D2\u6CD5</span>
    ListNode<span class="token operator">*</span> head2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_list</span><span class="token punctuation">(</span>head2<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span>head2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[0, 1, 2, 3]</span>
    <span class="token comment">//\u83B7\u53D6\u503C</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">get_value</span><span class="token punctuation">(</span>head1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//3</span>
    <span class="token comment">//\u5220\u9664\u8282\u70B9</span>
    <span class="token function">del_node</span><span class="token punctuation">(</span>head1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span>head1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[3, 1, 0]</span>
    <span class="token comment">//\u5728\u5934\u5C3E\u4EE5\u53CA\u4EFB\u610F\u4F4D\u7F6E\u63D2\u5165\u8282\u70B9</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>head2<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span>head2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[0, 1, 2, 10, 3]</span>
    <span class="token function">insert</span><span class="token punctuation">(</span>head2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span>head2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[10, 0, 1, 2, 10, 3]</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>head2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token function">search</span><span class="token punctuation">(</span>head2<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;,&quot;</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//4,-1</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="\u5FAA\u73AF\u94FE\u8868" tabindex="-1">\u5FAA\u73AF\u94FE\u8868 <a class="header-anchor" href="#\u5FAA\u73AF\u94FE\u8868" aria-hidden="true">#</a></h3><p>\u94FE\u8868\u6700\u540E\u4E00\u4E2A\u7ED3\u70B9\u7684\u6307\u9488\u57DF\u4E0D\u662Fnull\uFF0C\u800C\u662F\u5934\u7ED3\u70B9\u7684\u5730\u5740\uFF0C\u8868\u5F62\u6210\u4E00\u4E2A\u73AF\u3002</p><img src="https://webplus-cn-shenzhen-s-6130b804f968dd14cecc43e2.oss-cn-shenzhen.aliyuncs.com/blogs/image-20210607101843854.png" alt="image-20210607101843854" style="zoom:67%;"><h3 id="\u53CC\u5411\u94FE\u8868" tabindex="-1">\u53CC\u5411\u94FE\u8868 <a class="header-anchor" href="#\u53CC\u5411\u94FE\u8868" aria-hidden="true">#</a></h3><p>\u5206\u522B\u6307\u5411\u76F4\u63A5\u524D\u8D8B\u548C\u76F4\u63A5\u540E\u7EE7\uFF1A</p><div class="language-cpp line-numbers-mode"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dulnode</span><span class="token punctuation">{</span>
    ele data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">dulnode</span> <span class="token operator">*</span>next<span class="token punctuation">,</span> prior<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u5BF9\u79F0\u6027\uFF1A\u524D\u8D8B\u7684\u540E\u7EE7\u5C31\u662F\u5B83\u81EA\u5DF1\u3002</p><p><strong>\u5728\u53CC\u5411\u94FE\u8868\u7ED3\u70B9P\u4E4B\u524D\u63D2\u5165S\u7ED3\u70B9\uFF1A</strong></p><div class="language-cpp line-numbers-mode"><pre><code>s<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> p<span class="token operator">-&gt;</span>prior<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>prior<span class="token operator">-&gt;</span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>
s<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> s<span class="token punctuation">;</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>\u5220\u9664\u7ED3\u70B9</strong>\uFF1A</p><div class="language-cpp line-numbers-mode"><pre><code>p<span class="token operator">-&gt;</span>prior<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prior <span class="token operator">=</span> p<span class="token operator">-&gt;</span>prior<span class="token punctuation">;</span>
<span class="token keyword">delete</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u91CA\u653E\u7A7A\u95F4</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="\u603B\u7ED3\u5BF9\u6BD4" tabindex="-1">\u603B\u7ED3\u5BF9\u6BD4 <a class="header-anchor" href="#\u603B\u7ED3\u5BF9\u6BD4" aria-hidden="true">#</a></h2><ul><li>\u4ECE\u65F6\u95F4\u89D2\u5EA6 <ul><li>\u6309\u4F4D\u7F6E\u67E5\u627E\u5143\u7D20\u3001\u6216\u67E5\u627E\u5143\u7D20\u7684\u524D\u8D8B\u548C\u540E\u7EE7\uFF0C\u987A\u5E8F\u5B58\u50A8\u6709\u8F83\u5927\u4F18\u52BF\u3002</li><li>\u63D2\u5165\u6570\u636E\u3001\u5220\u9664\u6570\u636E\uFF0C\u94FE\u5F0F\u5B58\u50A8\u6709\u8F83\u5927\u4F18\u52BF\u3002</li></ul></li><li>\u4ECE\u7A7A\u95F4\u89D2\u5EA6 <ul><li>\u987A\u5E8F\u8868\u7684\u5B58\u50A8\u7A7A\u95F4\u662F\u9759\u6001\u5206\u914D\u7684\uFF0C\u5728\u7A0B\u5E8F\u6267\u884C\u524D\u5FC5\u987B\u89C4\u5B9A\u5176\u5B58\u50A8\u89C4\u6A21\u3002</li><li>\u94FE\u8868\u7684\u5B58\u50A8\u7A7A\u95F4\u662F\u52A8\u6001\u5206\u914D\u7684\uFF0C\u53EA\u8981\u5185\u5B58\u7A7A\u95F4\u6709\u7A7A\u95F2\uFF0C\u5C31\u4E0D\u4F1A\u6EA2\u51FA\u3002</li></ul></li></ul><table><thead><tr><th></th><th>\u987A\u5E8F\u5B58\u50A8</th><th>\u94FE\u5F0F\u5B58\u50A8</th></tr></thead><tbody><tr><td>\u5FAA\u73AF\u53D8\u91CF</td><td>\u4E0B\u6807\u53D8\u91CFi</td><td>\u6307\u9488\u53D8\u91CFp</td></tr><tr><td>\u521D\u59CB\u5316</td><td>i = 0</td><td>head=null\u6216head-&gt;next=null</td></tr><tr><td>\u5904\u7406\u5BF9\u8C61</td><td>a[j], *(a+i)</td><td>*p</td></tr><tr><td>\u4E0B\u4E00\u5BF9\u8C61</td><td>i = i + 1</td><td>p = p-&gt;next</td></tr><tr><td>\u5FAA\u73AF\u6761\u4EF6</td><td>i &lt; len</td><td>p != null</td></tr></tbody></table><h2 id="\u57FA\u7840\u7ECF\u5178\u9898\u578B" tabindex="-1">\u57FA\u7840\u7ECF\u5178\u9898\u578B <a class="header-anchor" href="#\u57FA\u7840\u7ECF\u5178\u9898\u578B" aria-hidden="true">#</a></h2><blockquote><p><em>\u7F16\u5199\u51FD\u6570\uFF0C\u4ECE\u4E00\u4E2A\u987A\u5E8F\u8868A\u4E2D\u5220\u9664\u5143\u7D20\u503C\u5728 x\u548Cy(x\u2264y)\u4E4B\u95F4\u7684\u6240\u6709\u5143\u7D20</em></p></blockquote><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdexcept&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token keyword">const</span> MAXLEN <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">t</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> data<span class="token punctuation">[</span>MAXLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>LIST<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">del_one</span><span class="token punctuation">(</span>LIST <span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> nums<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        nums<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    nums<span class="token operator">-&gt;</span>len<span class="token operator">--</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">del_range</span><span class="token punctuation">(</span>LIST <span class="token operator">*</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&gt;</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span> <span class="token string">&quot;invalid parameter:x &gt; y&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> x <span class="token operator">&amp;&amp;</span> nums<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">del_one</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            i<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print_list</span><span class="token punctuation">(</span>LIST<span class="token operator">*</span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> list<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;]&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u521D\u59CB\u5316\u987A\u5E8F\u8868</span>
    LIST nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">del_range</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/*
    [1, 2, 3, 4, 5, 6, 7, 8, ]
    [1, 2, 3, 8, ]  
    */</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><blockquote><p><em>\u7F16\u5199\u51FD\u6570\uFF0C\u5C06\u4E00\u4E2A\u987A\u5E8F\u8868 A\uFF08\u6709n\u4E2A\u5143\u7D20\u4E14\u4EFB\u4F55\u5143\u7D20\u5747\u4E0D\u4E3A 0\uFF09\uFF0C\u5206\u62C6\u6210\u4E24\u4E2A\u987A\u5E8F\u8868B\u548CC\u3002\u4F7FA\u4E2D\u5927\u4E8E0\u7684\u5143\u7D20\u5B58\u653E\u5728B\u4E2D\uFF0C\u5C0F\u4E8E0\u7684\u5143\u7D20\u5B58\u653E\u5728 C \u4E2D\uFF0C\u8FD4\u56DE\u987A\u5E8F\u8868B\u548CC\u3002</em></p></blockquote><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token keyword">const</span> MAXLEN <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>

<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">t</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> data<span class="token punctuation">[</span>MAXLEN<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
<span class="token punctuation">}</span>LIST<span class="token punctuation">;</span>

vector<span class="token operator">&lt;</span>LIST<span class="token operator">*</span><span class="token operator">&gt;</span> ab<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">cut_list</span><span class="token punctuation">(</span>LIST<span class="token operator">*</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span>
    LIST a1<span class="token punctuation">;</span>
    LIST b1<span class="token punctuation">;</span>
    LIST <span class="token operator">*</span> a <span class="token operator">=</span> <span class="token operator">&amp;</span>a1<span class="token punctuation">;</span>
    LIST <span class="token operator">*</span> b <span class="token operator">=</span> <span class="token operator">&amp;</span>b1<span class="token punctuation">;</span>
    a<span class="token operator">-&gt;</span>len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    b<span class="token operator">-&gt;</span>len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token operator">-&gt;</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            a<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
            a<span class="token operator">-&gt;</span>len<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
            b<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            k<span class="token operator">++</span><span class="token punctuation">;</span>
            b<span class="token operator">-&gt;</span>len<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    ab<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ab<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u8FD9\u91CC\u8FD9\u6837\u64CD\u4F5C\u662F\u4E3A\u4E86\u8FD4\u56DE\u4E24\u4E2A\u503C</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    LIST nums <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span> 
    LIST <span class="token operator">*</span>a<span class="token punctuation">,</span>  <span class="token operator">*</span>b<span class="token punctuation">;</span>
    <span class="token function">cut_list</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> ab<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    b <span class="token operator">=</span> ab<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><blockquote><p><em>\u5DF2\u77E5\u4E00\u4E2A\u5355\u94FE\u8868\uFF0C\u7F16\u5199\u4E00\u4E2A\u51FD\u6570\u5C06\u8BE5\u5355\u94FE\u8868\u590D\u5236\u5230\u53E6\u4E00\u4E2A\u5355\u94FE\u8868\u4E2D\u3002</em></p></blockquote><div class="language-cpp line-numbers-mode"><pre><code>ListNode <span class="token operator">*</span> <span class="token function">list_copy</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">throw</span> std<span class="token double-colon punctuation">::</span><span class="token function">out_of_range</span><span class="token punctuation">(</span> <span class="token string">&quot;empty list!&quot;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    ListNode<span class="token operator">*</span> c_head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    ListNode<span class="token operator">*</span> tail <span class="token operator">=</span> c_head<span class="token punctuation">;</span><span class="token comment">//\u5C3E\u63D2\u6CD5\u8F85\u52A9\u53D8\u91CF</span>
    ListNode<span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    ListNode<span class="token operator">*</span> c_p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        c_p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> c_p<span class="token punctuation">;</span>
        tail <span class="token operator">=</span> tail<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    c_p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> c_p<span class="token punctuation">;</span>
    <span class="token keyword">return</span> c_head<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    ListNode<span class="token operator">*</span> head1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init_list</span><span class="token punctuation">(</span>head1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ListNode<span class="token operator">*</span> head2 <span class="token operator">=</span> <span class="token function">list_copy</span><span class="token punctuation">(</span>head1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span>head2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    head2<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>key <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span>head1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span>head2<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token comment">/*
    [3, 2, 1, 0]
    [3, 2, 1, 0]
    [5, 2, 1, 0]
    */</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><blockquote><p><em>\u5982\u4E0B\u7C7B\u578B\u5B9A\u4E49\uFF1A</em></p><p><em>typedef struct node</em></p><p><em>\u2019{ int exp; //\u6307\u6570</em></p><p><em>float coef; //\u7CFB\u6570</em></p><p><em>struct node *next;</em></p><p><em>}\u2018polynode;</em></p><p><em>\u3010\u8981\u6C42\u3011\u7528\u94FE\u5F0F\u5B58\u50A8\u7ED3\u6784\u5B9E\u73B0\uFF1A\u751F\u6210\u4E24\u4E2A\u591A\u9879\u5F0FPA\u548CPB\uFF0C\u6C42PA\u548CPB\u4E4B\u548C\uFF0C\u5E76\u8F93\u51FA\u201C\u548C\u591A\u9879\u5F0F\u201D\u3002</em></p></blockquote><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">polynode</span> <span class="token punctuation">{</span>    
    <span class="token keyword">int</span> exp<span class="token punctuation">;</span>       <span class="token comment">//\u6307\u6570</span>
    <span class="token keyword">float</span> coef<span class="token punctuation">;</span>     <span class="token comment">//\u7CFB\u6570</span>
    <span class="token keyword">struct</span> <span class="token class-name">polynode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
    <span class="token function">polynode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">)</span> <span class="token operator">:</span>
        <span class="token function">exp</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">coef</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">init1</span><span class="token punctuation">(</span>polynode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    polynode<span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>
    polynode<span class="token operator">*</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">polynode</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">init2</span><span class="token punctuation">(</span>polynode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span>
    polynode<span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token punctuation">;</span>
    polynode<span class="token operator">*</span> temp<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">polynode</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        temp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> temp<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">combine</span><span class="token punctuation">(</span>polynode<span class="token operator">*</span> head1<span class="token punctuation">,</span> polynode<span class="token operator">*</span> head2<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head1<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> head2<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token comment">//head2\u4E3A\u5408\u6210\u540E\u7684\u94FE</span>
    polynode<span class="token operator">*</span> p1 <span class="token operator">=</span> head1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    polynode<span class="token operator">*</span> p2 <span class="token operator">=</span> head2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token comment">//\u7C7B\u4F3C\u4E8E\u5192\u6CE1\u6392\u5E8F\u627E\u76F8\u540C\u5E95\u7684\u6570\uFF0C\u627E\u5230\u5C31\u5408\u5728\u4E00\u8D77\uFF0C\u5426\u5219\u5C31\u591A\u589E\u52A0\u4E00\u4E2A\u8282\u70B9</span>
    <span class="token keyword">int</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p1<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        p2 <span class="token operator">=</span> head2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token comment">//\u56E0\u4E3A\u540E\u9762\u589E\u52A0\u4E86\u4E00\u4E2A\u8282\u70B9\u7684\u8BDD\uFF0C\u5C31\u9700\u8981\u4ECE\u5934\u5F00\u59CB\u904D\u5386</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>p2<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token operator">-&gt;</span>coef <span class="token operator">==</span> p2<span class="token operator">-&gt;</span>coef<span class="token punctuation">)</span><span class="token punctuation">{</span>
                p2<span class="token operator">-&gt;</span>exp <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>exp <span class="token operator">+</span> p2<span class="token operator">-&gt;</span>exp<span class="token punctuation">;</span>
                flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            p2 <span class="token operator">=</span> p2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token operator">-&gt;</span>coef <span class="token operator">==</span> p2<span class="token operator">-&gt;</span>coef<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//p2\u8FD8\u5269\u4E00\u4E2A\u5C3E\u8282\u70B9</span>
            p2<span class="token operator">-&gt;</span>exp <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>exp <span class="token operator">+</span> p2<span class="token operator">-&gt;</span>exp<span class="token punctuation">;</span>
            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u628Ap1\u63D2\u8FDB\u53BB</span>
            p1<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
            head2<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        p1 <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>


    <span class="token keyword">while</span><span class="token punctuation">(</span>p2<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//p1\u8FD8\u5269\u4E00\u4E2A\u5C3E\u8282\u70B9</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token operator">-&gt;</span>coef <span class="token operator">==</span> p2<span class="token operator">-&gt;</span>coef<span class="token punctuation">)</span><span class="token punctuation">{</span>
            p2<span class="token operator">-&gt;</span>exp <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>exp <span class="token operator">+</span> p2<span class="token operator">-&gt;</span>exp<span class="token punctuation">;</span>
            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p2 <span class="token operator">=</span> p2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token operator">-&gt;</span>coef <span class="token operator">==</span> p2<span class="token operator">-&gt;</span>coef<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u8FD8\u5269\u4E00\u4E2A\u5C3E\u8282\u70B9</span>
        p2<span class="token operator">-&gt;</span>exp <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>exp <span class="token operator">+</span> p2<span class="token operator">-&gt;</span>exp<span class="token punctuation">;</span>
        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u628Ap1\u63D2\u8FDB\u53BB</span>
        p1<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head2<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        head2<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    p1 <span class="token operator">=</span> p1<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print_list</span><span class="token punctuation">(</span>polynode<span class="token operator">*</span> head<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u6539\u4E00\u4E0B</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>head<span class="token operator">-&gt;</span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;[]&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">;</span>
    polynode<span class="token operator">*</span> p <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>coef <span class="token operator">&lt;&lt;</span>  <span class="token string">&quot;^&quot;</span><span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>exp <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>coef <span class="token operator">&lt;&lt;</span>  <span class="token string">&quot;^&quot;</span><span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>exp<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;]&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    polynode<span class="token operator">*</span> head1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">polynode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    polynode<span class="token operator">*</span> head2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">polynode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init1</span><span class="token punctuation">(</span>head1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span>head1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">init2</span><span class="token punctuation">(</span>head2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span>head2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">combine</span><span class="token punctuation">(</span>head1<span class="token punctuation">,</span> head2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_list</span><span class="token punctuation">(</span>head2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/*\u8F93\u51FA
[4^4, 3^3, 2^2, 1^1, 0^0]
[5^5, 4^4, 3^3, 2^2, 1^1]
[0^0, 5^5, 4^8, 3^6, 2^4, 1^2]
*/</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br></div></div><blockquote><p><em>\u7EA6\u745F\u592B\u751F\u8005\u6B7B\u8005\u95EE\u9898\u3002\u636E\u8BF4\u8457\u540D\u72B9\u592A\u5386\u53F2\u5B66\u5BB6 Josephus\u6709\u8FC7\u4EE5\u4E0B\u7684\u6545\u4E8B\uFF1A\u5728\u7F57\u9A6C\u4EBA\u5360\u9886\u4E54\u5854\u5E15\u7279\u540E\uFF0C39\u4E2A\u72B9\u592A\u4EBA\u4E0EJosephus\u53CA\u4ED6\u7684\u670B\u53CB\u8EB2\u5230\u4E00\u4E2A\u6D1E\u4E2D\uFF0C39\u4E2A\u72B9\u592A\u4EBA\u51B3\u5B9A\u5B81\u613F\u6B7B\u4E5F\u4E0D\u8981\u88AB\u654C\u4EBA\u6293\u5230\uFF0C\u4E8E\u662F\u51B3\u5B9A\u4E86\u4E00\u4E2A\u81EA\u6740\u65B9\u5F0F\uFF1A41\u4E2A\u4EBA\u6392\u6210\u4E00\u4E2A\u5706\u5708\uFF0C\u7531\u7B2C1\u4E2A\u4EBA\u5F00\u59CB\u62A5\u6570\uFF0C\u6BCF\u62A5\u6570\u5230\u7B2C3\u4EBA\u8BE5\u4EBA\u5C31\u5FC5\u987B\u81EA\u6740\uFF0C\u7136\u540E\u518D\u7531\u4E0B\u4E00\u4E2A\u91CD\u65B0\u62A5\u6570\uFF0C\u76F4\u5230\u6240\u6709\u4EBA\u90FD\u81EA\u6740\u8EAB\u4EA1\u4E3A\u6B62\u3002\u7136\u800CJosephus\u548C\u4ED6\u7684\u670B\u53CB\u5E76\u4E0D\u60F3\u9075\u4ECE\uFF0CJosephus\u8981\u4ED6\u7684\u670B\u53CB\u5148\u5047\u88C5\u9075\u4ECE\uFF0C\u4ED6\u5C06\u670B\u53CB\u4E0E\u81EA\u5DF1\u5B89\u6392\u5728\u7B2C16\u4E2A\u4E0E\u7B2C31\u4E2A\u4F4D\u7F6E\uFF0C\u4E8E\u662F\u9003\u8FC7\u4E86\u8FD9\u573A\u6B7B\u4EA1\u6E38\u620F\u3002\u8FD9\u5C31\u662F\u8457\u540D\u7684\u7EA6\u745F\u592B\u751F\u8005\u6B7B\u8005\u95EE\u9898\u3002</em></p><p><em>17\u4E16\u7EAA\u7684\u6CD5\u56FD\u6570\u5B66\u5BB6\u52A0\u65AF\u5E15\u5728\u300A\u6570\u76EE\u7684\u6E38\u620F\u95EE\u9898\u300B\u4E2D\u4E5F\u8BB2\u4E86\u8FD9\u6837\u4E00\u4E2A\u6545\u4E8B\uFF1A15\u4E2A\u6559\u5F92\u548C15\u4E2A\u975E\u6559\u5F92\u5728\u6DF1\u6D77\u4E0A\u9047\u9669\uFF0C\u5FC5\u987B\u5C06\u4E00\u534A\u7684\u4EBA\u6295\u5165\u6D77\u4E2D\uFF0C\u5176\u4F59\u7684\u4EBA\u624D\u80FD\u5E78\u514D\u4E8E\u96BE\uFF0C\u4E8E\u662F\u60F3\u4E86\u4E00\u4E2A\u529E\u6CD5\uFF1A30\u4E2A\u4EBA\u56F4\u6210\u4E00\u5706\u5708\uFF0C\u4ECE\u7B2C\u4E00\u4E2A\u4EBA\u5F00\u59CB\u4F9D\u6B21\u62A5\u6570\uFF0C\u6BCF\u6570\u5230\u7B2C\u4E5D\u4E2A\u4EBA\u5C31\u5C06\u4ED6\u6254\u5165\u5927\u6D77\uFF0C\u5982\u6B64\u5FAA\u73AF\u8FDB\u884C\u76F4\u5230\u4EC5\u4F5915\u4E2A\u4EBA\u4E3A\u6B62\u3002\u3010\u95EE\u9898\u3011\u600E\u6837\u7684\u5B89\u6392\u624D\u80FD\u4F7F\u6BCF\u6B21\u6295\u5165\u5927\u6D77\u7684\u90FD\u662F\u975E\u6559\u5F92\uFF1F</em></p><p><em>\u8BF7\u7F16\u7A0B\u89E3\u51B3\u8FD9\u4E00n(1\u2264n\u226430)\u4E2A\u4EBA\u7684\u8DF3\u6D77\u95EE\u9898\u3002\u8981\u6C42\u5206\u522B\u7528\u4E24\u79CD\u7EBF\u6027\u8868\u7684\u5B58\u50A8\u7ED3\u6784\u6765\u89E3\u51B3\u3002\u3010\u63D0\u793A\u3011\u5728\u4F7F\u7528\u94FE\u5F0F\u5B58\u50A8\u7ED3\u6784\u65F6\uFF0C\u53EF\u6784\u9020\u5177\u670930\u4E2A\u7ED3\u70B9\u7684\u5355\u5FAA\u73AF\u94FE\u8868\u3002</em></p></blockquote><div class="language-cpp line-numbers-mode"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstring&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">solution1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">memset</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//C++\u5185\u7F6E\u65B9\u6CD5\u521D\u59CB\u5316\u6570\u7EC4\u5168\u90E8\u4E3A0</span>
    <span class="token comment">//\u5FAA\u73AF15\u6B21\uFF0C\u627E\u51FA\u4F1A\u6B7B\u7684\u4F4D\u7F6E\uFF1B</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            i <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//\u8DF3\u8FC7\u6B7B\u4EBA</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">%</span><span class="token number">9</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u6807\u8BB0\u6B7B\u4EBA</span>
            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;]&#39;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">struct</span> <span class="token class-name">listnode</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> dead<span class="token punctuation">;</span>
    <span class="token keyword">int</span> index<span class="token punctuation">;</span>
    listnode<span class="token operator">*</span> next<span class="token punctuation">;</span>
    <span class="token function">listnode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token function">dead</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">index</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">solution2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//\u521B\u5EFA\u4E00\u4E2A30\u4E2A\u8282\u70B9\u7684\u5FAA\u73AF\u5217\u8868;</span>
    listnode<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    listnode<span class="token operator">*</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">listnode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//\u9996\u5143\u8282\u70B9</span>
    listnode<span class="token operator">*</span> tail <span class="token operator">=</span> p1<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">listnode</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>
        tail <span class="token operator">=</span> tail<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    tail<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p1<span class="token punctuation">;</span><span class="token comment">//\u5934\u5C3E\u76F8\u8FDE</span>
    <span class="token comment">//\u5F00\u59CB\u6B7B\u4EBA</span>
    p <span class="token operator">=</span> p1<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> count <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token operator">*</span><span class="token number">9</span><span class="token punctuation">;</span> count<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>dead <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//\u8DF3\u8FC7\u6B7B\u4EBA</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">%</span><span class="token number">9</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//\u6807\u8BB0\u6B7B\u4EBA</span>
            p<span class="token operator">-&gt;</span>dead <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//\u8F93\u51FA\u8981\u6B7B\u7684\u4F4D\u7F6E</span>
    p <span class="token operator">=</span> p1<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-&gt;</span>dead <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
        p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;]&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;solution1:&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">solution1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//[1, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, </span>
<span class="token comment">//0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, ]</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;solution2:&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token function">solution2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//\u7ED3\u679C\u4E00\u81F4\uFF0C\u76F8\u6BD4\u4E8E\u4E0A\u9762\u4E00\u79CD\uFF0C\u4EC5\u4EC5\u5728\u8BA1\u6570\u503C\u8D85\u8FC730\u65F6\u4E0D\u9700\u8981\u91CD\u7F6E\u8BA1\u6570\u503C</span>
<span class="token comment">//\u56E0\u4E3A\u662F\u5FAA\u73AF\u94FE\u8868\uFF0C\u5176\u4ED6\u7684\u601D\u8DEF\u4E5F\u90FD\u662F\u4E00\u81F4\u7684</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br></div></div>`,72);function r(u,i,k,b,m,d){const n=a("Comment");return o(),p("div",null,[l,t(n)])}var y=s(c,[["render",r]]);export{h as __pageData,y as default};
